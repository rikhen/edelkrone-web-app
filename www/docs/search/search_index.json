{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Home Page Table of Contents Overview of API document Definitions Flow Control of Devices Limitations Configurations","title":"Home"},{"location":"index.html#home-page","text":"","title":"Home Page"},{"location":"index.html#table-of-contents","text":"Overview of API document Definitions Flow Control of Devices Limitations Configurations","title":"Table of Contents"},{"location":"api_docs.html","text":"","title":"Api docs"},{"location":"config.html","text":"Configuration of the edelkrone SDK The edelkrone SDK has a configuration file in JSON format. It contains pieces of information: SDK server address and port, web server address and port, and serial port information. As above image shows this configuration file can be reached from the system menu. The JSON file opens by default in a text editor of your OS when you click on the Configuration label. You need to restart edelkrone SDK after you have changed the configuration file. Server Configuration The edelkrone SDK has three servers: HTTP, WebSocket and Web-Server. Each server has its address and port configuration. HTTP Server Configuration The HTTP server has two configurations communication IP and port. The default configuration is always `0.0.0.0:32222`. Websocket Server Configuration The Websocket server has two configurations communication IP and port. The default configuration is always `0.0.0.0:32223`. Web Server Configuration The web server has two configurations communication IP and port. The default configuration is always `0.0.0.0:32224`.","title":"Configuration"},{"location":"config.html#configuration-of-the-edelkrone-sdk","text":"The edelkrone SDK has a configuration file in JSON format. It contains pieces of information: SDK server address and port, web server address and port, and serial port information. As above image shows this configuration file can be reached from the system menu. The JSON file opens by default in a text editor of your OS when you click on the Configuration label. You need to restart edelkrone SDK after you have changed the configuration file.","title":"Configuration of the edelkrone SDK"},{"location":"config.html#server-configuration","text":"The edelkrone SDK has three servers: HTTP, WebSocket and Web-Server. Each server has its address and port configuration.","title":"Server Configuration"},{"location":"config.html#http-server-configuration","text":"The HTTP server has two configurations communication IP and port. The default configuration is always `0.0.0.0:32222`.","title":"HTTP Server Configuration"},{"location":"config.html#websocket-server-configuration","text":"The Websocket server has two configurations communication IP and port. The default configuration is always `0.0.0.0:32223`.","title":"Websocket Server Configuration"},{"location":"config.html#web-server-configuration","text":"The web server has two configurations communication IP and port. The default configuration is always `0.0.0.0:32224`.","title":"Web Server Configuration"},{"location":"control.html","text":"Control of Your Device Each link module has a specific communication type, pairing methods, and specific commands and restrictions. To control your device, follow the instructions that are prepared for your link module. Stop Motion Module Stop Motion Module provides communication with a cable connection. So there one device is connected with the cable at the same time. You can manage your device(s) according to the image below. Supported Connection Type Supported Device Supported Move Type Supported Real-Time Axis Description RJ45 All Devices Real-Time Move Joystick Move Keypose Move - - Each Stop Motion Module has a unique link id, which is 24 characters long. for example; 0013002F5053431920383031 You can control your device using this link ID. Motion Control Stop Motion Module supports three types of movement; Real-Time Move Joystick Move Keypose Move Limitations There is only one device that can connect via cable. If there are devices paired via wireless except connected with cable, the Real-Time Move is only working with the cable-connected device. More Details About Limitations How To Control Your Device With Stop Motion Module The edelkrone SDK will notify you of each module plugged into the PC. This notification appears in the notification area of your OS. This notification contains the Link ID of your link module. This ID is also required to distinguish if you have multiple modules when sending commands. You will then again receive a notification that the SDK has recognized your module and open communication channel. How to get the Link ID of Stop Motion Module and its status To control your device, you first need to get the Link ID of the Stop Motion Module. You can get the Link ID of the Stop Motion Module. Get Link Module List and Status Command Also, this command you can use to get the status of other link modules. Caution Almost all commands need that ID. Also, the Link ID must be saved for later usage. How to manage multiple devices Stop Motion Module is automatically paired with the connected device via a patch cable. Paired device(s) after completing pairing are called a bundle . But, you may want to control multiple devices; you need to pair them with the device connected with the Stop Motion Module. But Stop Motion Module does not have any pairing ability, and the edelkrone SDK does not have any pair command for the Stop Motion Module; you can use the edelkrone mobile application to pair them. How to get the status of edelkrone devices in bundle The bundle status is automatically updated from edelkrone devices when the pairing process is completed. The status contains paired devices information, supported axis, supported real-time axis, bundle status, axis values of the devices. You can get status by using this command status end point . Send move command to your bundle There are four types of movement. Except for real-time moves, other movement types can be controlled over HTTP API. But, HTTP has several overheads; therefore, you need to prefer Websocket Protocol to manage in real-time. 1. Joystick This command takes the speed ratio in the axis to be moved from you and makes it move at that speed in that direction. This movement supports a five-axis that depends on your bundle. For example; Your bundle has three axes, for example, pan, tilt, and slide. And you want to send a move command in these three axes. Just add the axes you want and their speed ratio. You can also find more details about that api command here . 2. Keypose You can save up to six poses. You can make a loop between these poses, or you can send your bundle from a point you want to a pose you want. 1. Keypose Store Current Pose When you send this command, a pose with an index number of your bundle at the time will be stored for you. You can also find more details about that api command here . 2. Keypose Store By Numeric Data Numeric data means your axis values, which are you want to save as pose. You can also find more details about that api command here . 3. Keypose Move with Fixed Duration You can make your bundle go from any point to a pose you want with this command. But this movement takes place with the fixed duration you give. But movement speed varies according to the given time. You can also find from more details about that api command here . 4. Keypose Move with Fixed Speed You can make your bundle go from any point to a pose you want with this command. But this movement takes place with the fixed speed ratio you give. But the duration of the movement varies according to the given speed ratio. You can also find more details about that api command here . 5. Loop Between Keyposes with Fixed Duration With this command, you can create loops between the poses you recorded. This movement takes place with the fixed duration you give. But movement speed varies according to the given time. You can also find more details about that api command here . 5. Loop Between Keyposes with Fixed Speed With this command, you can create loops between the poses you recorded. This movement takes place with the fixed speed you give. But movement duration varies according to the given speed ratio. You can also find more details about that api command here . 6. Read Keypose Numeric Information With this command, you can read the axis values of the pose you stored. It takes an index as an argument and returns information that you want to get. You can also find more details about that api command here . 7. Delete Keypose When you store a keypose, it occupies a slot in a keypose list. If you need to add a new keypose, you need to delete keypose. You can also find from more details about that api command here . 3. Focus Move You can use it for focus movement when you plugged a focus module into your head. You can also find from more details about that api command here . 4. Real-Time Move The Stop Motion Module supports Real-Time . Real-Time movement needs a reliable communication channel. So wireless connection does not support real-time movement. You can also find more details about that api command here . Link Adapter Link Adapter provides communication with three types of connection. These are; Wireless RJ45 Canbus Each connection type has a specific connection, pairing, and method of motion. You can manage your device(s) by following the image below. Each Link Adapter has a unique link id, with a length of 12 characters. for example; 205F344B5530 All commands need this Link ID. Wireless The wireless connection does not need another physical connection except a connection between Link Adapter and the PC. Supported Connection Type Supported Device Supported Move Type Supported Real-Time Axis Description Wireless All Devices Joystick Move Keypose Move - - RJ45 Head Plus Real-Time Move Joystick Move Keypose Move - - Canbus HeadPlus Pro v2 Real-Time Move Joystick Move Keypose Move - - Pairing Pairing is completed via Link Adapter using API commands. Calibration and Limits Motion Control Link Adapter supports three two types of movement; Joystick Move Keypose Move Limitations Wireless connection does not support Real-Time movement. If there is much wifi or electromagnetic signal in the working environment, that noise can affect the connection. Details RJ45 The connection is established with a patch cable. The patch cable is plugged into whichever device you want to operate with the Link Adapter. Pairing RJ45 connection type does not have a pairing capability. So if you want to control other devices over the master device, you should use the mobile application apps. Motion Control RJ45 connection type supports three types of movement; Real-Time Move Joystick Move Keypose Move Limitations There is only one device that can connect via cable. If there are devices paired via wireless except connected with cable, the Real-Time Move only works with the cable-connected device. More Details About Limitations Link Connection The Link connection means that each device is connected via link cable. Supported Connection Type Supported Device Supported Move Type Supported Real-Time Axis Description Wireless All Devices Joystick Move Keypose Move - - RJ45 Head Plus Real-Time Move Joystick Move Keypose Move - - Canbus HeadPlus Pro v2 Real-Time Move Joystick Move Keypose Move - - Pairing Pairing is completed via Link Adapter using API commands. Calibration and Limits Motion Control Link connection type supports three types of movement; Real-Time Move Joystick Move Keypose Move Limitations Link connection needs to the cable connection between devices. So How To Control Your Device With Link Adapter The edelkrone SDK will notify you of each module plugged into the PC. This notification appears in the notification area of your OS. That notification contains the Link ID of your link module. This ID is also required to distinguish if you have multiple modules when sending commands. You will then get a notification that the SDK has recognized your module and open a communication channel. How to get the Link ID of Link Adapter and its status To control your device, you first need to get the Link ID of the Link Adapter. You can get the Link ID of the Link Adapter. Get Link Module List and Status Command You can also use this command to get the status of the other link modules. How to manage multiple devices Paired device(s) after completing pairing are called a bundle . First of all, to manage your devices, you need to create a bundle by pairing your devices and Link Adapter. Or attach your link adapter to an already existing bundle. The link Adapter has three communication channels. Each channel has its unique pairing methods. It is explained below how to pair your device according to your chosen channel. Pairing 1. Pairing with Wireless Channel Link Adapter can create a bundle from zero or can attach itself to your already created bundle. To pair your devices with the Link Adapter, you need to know your devices' mac address. To get the mac addresses, you should scan command to the Link Adapter. You can also find from here more details about that api command. Warning!!! Please be sure that your devices are energized. After then the Link Adapter will be gathered the mac addresses from its around. To get mac addresses from edelkrone SDK, you can use this scan result command . Now, you have mac addresses of your devices that you want to control. You can create a bundle or attach to already exist a bundle by using the below commands respectively. \"create bundle\" command creates a bundle by including itself. \"attach to exist bundle\" command to attach to an already existing bundle. You can follow the pairing status by using the pairing status command when sending a pairing command. You can send move commands when the pairing status is \"ok\". \"Get Pairing Status\" 2. Pairing with RJ45 The pairing with RJ45 is automatically paired with the connected device via a patch cable. Paired device(s) after completing pairing are called a bundle . But, you may want to control multiple devices; you need to pair it with the device connected with the Link Adapter. But RJ45 does not have any pairing ability, and the edelkrone SDK does not have any pair command for RJ45; you can use the edelkrone mobile application to pair them. 2. Pairing CanBus How to get the status of the edelkrone device in the bundle The bundle status is automatically updated from edelkrone devices when the pairing process is completed. The status contains paired devices information, supported axis, supported real-time axis, bundle state, axis values of the devices. You can get the status by using the command status end point . Send move command to your bundle There are four types of movement. Except for real-time moves, other movement types can be controlled over HTTP API. But, HTTP has several overheads; therefore, you need to prefer Websocket Protocol to control in real-time. Also check for limitations . 1. Joystick This command takes the speed ratio in the axis to be moved and makes it move at that speed in that direction. This movement supports a five-axis that depends on your bundle. For example; Your bundle has three axes, for example, pan, tilt, and slide. And you want to send a move command in these three axes. Just add the axes you want and their speed ratio. You can also find more details about that api command here 2. Keypose You can save up to six poses. You can make a loop between these poses, or you can send your bundle from a point you want to a pose you want. 1. Keypose Store Current Pose When you send this command, a pose will be stored for you with an index number of your bundle at the moment. You can also find from here more details about that api command. 2. Keypose Store By Numeric Data Numeric data means that your axis values, which are you want to save as pose. You can also find from here more details about that api command. 3. Keypose Move with Fixed Duration You can make your bundle go from any point to a pose you want with this command. But this movement takes place with the fixed duration you give. But movement speed varies according to the given time. You can also find from here more details about that api command. 4. Keypose Move with Fixed Speed You can make your bundle go from any point to a pose you want with this command. But this movement takes place with the fixed speed ratio you give. But movement duration varies according to the given speed ratio. You can also find here more details about that api command. 5. Loop Between Keyposes with Fixed Duration This command can create loops between the poses you recorded. This movement takes place with the fixed duration you give. But movement speed varies according to the given time. You can also find more details about that api command here . 5. Loop Between Keyposes with Fixed Speed With this command, you can create loops between the poses you recorded. This movement takes place with the fixed speed you give. But the duration of the movement varies according to the given speed ratio. You can also find from more details about that api command here . 6. Read Keypose Numeric Information With this command, you can read the axis values of the pose you stored. It takes an index as an argument and returns the information that you want. You can also find more details about that api command here . 7. Delete Keypose When you store a keypose, it occupies a slot in a keypose list. If you need to add a new keypose, you need to delete keypose. You can also find from more details about that api command here . 3. Focus Move You can use it for focus movement when you plug a focus module into your head. You can also find more details about that api command here . 4. Real-Time Move The supports Real-Time . Real-Time movement needs a reliable communication channel. So wireless connection does not support the real-time movement. The HTTP protocol has some overheads. You can also find more details about that api command here .","title":"How to Control Your Devices"},{"location":"control.html#control-of-your-device","text":"Each link module has a specific communication type, pairing methods, and specific commands and restrictions. To control your device, follow the instructions that are prepared for your link module.","title":"Control of Your Device"},{"location":"control.html#stop-motion-module","text":"Stop Motion Module provides communication with a cable connection. So there one device is connected with the cable at the same time. You can manage your device(s) according to the image below. Supported Connection Type Supported Device Supported Move Type Supported Real-Time Axis Description RJ45 All Devices Real-Time Move Joystick Move Keypose Move - - Each Stop Motion Module has a unique link id, which is 24 characters long. for example; 0013002F5053431920383031 You can control your device using this link ID.","title":"Stop Motion Module"},{"location":"control.html#motion-control","text":"Stop Motion Module supports three types of movement; Real-Time Move Joystick Move Keypose Move","title":"Motion Control"},{"location":"control.html#limitations","text":"There is only one device that can connect via cable. If there are devices paired via wireless except connected with cable, the Real-Time Move is only working with the cable-connected device. More Details About Limitations","title":"Limitations"},{"location":"control.html#how-to-control-your-device-with-stop-motion-module","text":"The edelkrone SDK will notify you of each module plugged into the PC. This notification appears in the notification area of your OS. This notification contains the Link ID of your link module. This ID is also required to distinguish if you have multiple modules when sending commands. You will then again receive a notification that the SDK has recognized your module and open communication channel.","title":"How To Control Your Device With Stop Motion Module"},{"location":"control.html#how-to-get-the-link-id-of-stop-motion-module-and-its-status","text":"To control your device, you first need to get the Link ID of the Stop Motion Module. You can get the Link ID of the Stop Motion Module. Get Link Module List and Status Command Also, this command you can use to get the status of other link modules. Caution Almost all commands need that ID. Also, the Link ID must be saved for later usage.","title":"How to get the Link ID of Stop Motion Module and its status"},{"location":"control.html#how-to-manage-multiple-devices","text":"Stop Motion Module is automatically paired with the connected device via a patch cable. Paired device(s) after completing pairing are called a bundle . But, you may want to control multiple devices; you need to pair them with the device connected with the Stop Motion Module. But Stop Motion Module does not have any pairing ability, and the edelkrone SDK does not have any pair command for the Stop Motion Module; you can use the edelkrone mobile application to pair them.","title":"How to manage multiple devices"},{"location":"control.html#how-to-get-the-status-of-edelkrone-devices-in-bundle","text":"The bundle status is automatically updated from edelkrone devices when the pairing process is completed. The status contains paired devices information, supported axis, supported real-time axis, bundle status, axis values of the devices. You can get status by using this command status end point .","title":"How to get the status of edelkrone devices in bundle"},{"location":"control.html#send-move-command-to-your-bundle","text":"There are four types of movement. Except for real-time moves, other movement types can be controlled over HTTP API. But, HTTP has several overheads; therefore, you need to prefer Websocket Protocol to manage in real-time.","title":"Send move command to your bundle"},{"location":"control.html#1-joystick","text":"This command takes the speed ratio in the axis to be moved from you and makes it move at that speed in that direction. This movement supports a five-axis that depends on your bundle. For example; Your bundle has three axes, for example, pan, tilt, and slide. And you want to send a move command in these three axes. Just add the axes you want and their speed ratio. You can also find more details about that api command here .","title":"1. Joystick"},{"location":"control.html#2-keypose","text":"You can save up to six poses. You can make a loop between these poses, or you can send your bundle from a point you want to a pose you want.","title":"2. Keypose"},{"location":"control.html#1-keypose-store-current-pose","text":"When you send this command, a pose with an index number of your bundle at the time will be stored for you. You can also find more details about that api command here .","title":"1. Keypose Store Current Pose"},{"location":"control.html#2-keypose-store-by-numeric-data","text":"Numeric data means your axis values, which are you want to save as pose. You can also find more details about that api command here .","title":"2. Keypose Store By Numeric Data"},{"location":"control.html#3-keypose-move-with-fixed-duration","text":"You can make your bundle go from any point to a pose you want with this command. But this movement takes place with the fixed duration you give. But movement speed varies according to the given time. You can also find from more details about that api command here .","title":"3. Keypose Move with Fixed Duration"},{"location":"control.html#4-keypose-move-with-fixed-speed","text":"You can make your bundle go from any point to a pose you want with this command. But this movement takes place with the fixed speed ratio you give. But the duration of the movement varies according to the given speed ratio. You can also find more details about that api command here .","title":"4. Keypose Move with Fixed Speed"},{"location":"control.html#5-loop-between-keyposes-with-fixed-duration","text":"With this command, you can create loops between the poses you recorded. This movement takes place with the fixed duration you give. But movement speed varies according to the given time. You can also find more details about that api command here .","title":"5.  Loop Between Keyposes with Fixed Duration"},{"location":"control.html#5-loop-between-keyposes-with-fixed-speed","text":"With this command, you can create loops between the poses you recorded. This movement takes place with the fixed speed you give. But movement duration varies according to the given speed ratio. You can also find more details about that api command here .","title":"5.  Loop Between Keyposes with Fixed Speed"},{"location":"control.html#6-read-keypose-numeric-information","text":"With this command, you can read the axis values of the pose you stored. It takes an index as an argument and returns information that you want to get. You can also find more details about that api command here .","title":"6. Read Keypose Numeric Information"},{"location":"control.html#7-delete-keypose","text":"When you store a keypose, it occupies a slot in a keypose list. If you need to add a new keypose, you need to delete keypose. You can also find from more details about that api command here .","title":"7. Delete Keypose"},{"location":"control.html#3-focus-move","text":"You can use it for focus movement when you plugged a focus module into your head. You can also find from more details about that api command here .","title":"3. Focus Move"},{"location":"control.html#4-real-time-move","text":"The Stop Motion Module supports Real-Time . Real-Time movement needs a reliable communication channel. So wireless connection does not support real-time movement. You can also find more details about that api command here .","title":"4. Real-Time Move"},{"location":"control.html#link-adapter","text":"Link Adapter provides communication with three types of connection. These are; Wireless RJ45 Canbus Each connection type has a specific connection, pairing, and method of motion. You can manage your device(s) by following the image below. Each Link Adapter has a unique link id, with a length of 12 characters. for example; 205F344B5530 All commands need this Link ID.","title":"Link Adapter"},{"location":"control.html#wireless","text":"The wireless connection does not need another physical connection except a connection between Link Adapter and the PC. Supported Connection Type Supported Device Supported Move Type Supported Real-Time Axis Description Wireless All Devices Joystick Move Keypose Move - - RJ45 Head Plus Real-Time Move Joystick Move Keypose Move - - Canbus HeadPlus Pro v2 Real-Time Move Joystick Move Keypose Move - -","title":"Wireless"},{"location":"control.html#pairing","text":"Pairing is completed via Link Adapter using API commands.","title":"Pairing"},{"location":"control.html#calibration-and-limits","text":"","title":"Calibration and Limits"},{"location":"control.html#motion-control_1","text":"Link Adapter supports three two types of movement; Joystick Move Keypose Move","title":"Motion Control"},{"location":"control.html#limitations_1","text":"Wireless connection does not support Real-Time movement. If there is much wifi or electromagnetic signal in the working environment, that noise can affect the connection. Details","title":"Limitations"},{"location":"control.html#rj45","text":"The connection is established with a patch cable. The patch cable is plugged into whichever device you want to operate with the Link Adapter.","title":"RJ45"},{"location":"control.html#pairing_1","text":"RJ45 connection type does not have a pairing capability. So if you want to control other devices over the master device, you should use the mobile application apps.","title":"Pairing"},{"location":"control.html#motion-control_2","text":"RJ45 connection type supports three types of movement; Real-Time Move Joystick Move Keypose Move","title":"Motion Control"},{"location":"control.html#limitations_2","text":"There is only one device that can connect via cable. If there are devices paired via wireless except connected with cable, the Real-Time Move only works with the cable-connected device. More Details About Limitations","title":"Limitations"},{"location":"control.html#link-connection","text":"The Link connection means that each device is connected via link cable. Supported Connection Type Supported Device Supported Move Type Supported Real-Time Axis Description Wireless All Devices Joystick Move Keypose Move - - RJ45 Head Plus Real-Time Move Joystick Move Keypose Move - - Canbus HeadPlus Pro v2 Real-Time Move Joystick Move Keypose Move - -","title":"Link Connection"},{"location":"control.html#pairing_2","text":"Pairing is completed via Link Adapter using API commands.","title":"Pairing"},{"location":"control.html#calibration-and-limits_1","text":"","title":"Calibration and Limits"},{"location":"control.html#motion-control_3","text":"Link connection type supports three types of movement; Real-Time Move Joystick Move Keypose Move","title":"Motion Control"},{"location":"control.html#limitations_3","text":"Link connection needs to the cable connection between devices. So","title":"Limitations"},{"location":"control.html#how-to-control-your-device-with-link-adapter","text":"The edelkrone SDK will notify you of each module plugged into the PC. This notification appears in the notification area of your OS. That notification contains the Link ID of your link module. This ID is also required to distinguish if you have multiple modules when sending commands. You will then get a notification that the SDK has recognized your module and open a communication channel.","title":"How To Control Your Device With Link Adapter"},{"location":"control.html#how-to-get-the-link-id-of-link-adapter-and-its-status","text":"To control your device, you first need to get the Link ID of the Link Adapter. You can get the Link ID of the Link Adapter. Get Link Module List and Status Command You can also use this command to get the status of the other link modules.","title":"How to get the Link ID of Link Adapter and its status"},{"location":"control.html#how-to-manage-multiple-devices_1","text":"Paired device(s) after completing pairing are called a bundle . First of all, to manage your devices, you need to create a bundle by pairing your devices and Link Adapter. Or attach your link adapter to an already existing bundle. The link Adapter has three communication channels. Each channel has its unique pairing methods. It is explained below how to pair your device according to your chosen channel.","title":"How to manage multiple devices"},{"location":"control.html#pairing_3","text":"","title":"Pairing"},{"location":"control.html#1-pairing-with-wireless-channel","text":"Link Adapter can create a bundle from zero or can attach itself to your already created bundle. To pair your devices with the Link Adapter, you need to know your devices' mac address. To get the mac addresses, you should scan command to the Link Adapter. You can also find from here more details about that api command. Warning!!! Please be sure that your devices are energized. After then the Link Adapter will be gathered the mac addresses from its around. To get mac addresses from edelkrone SDK, you can use this scan result command . Now, you have mac addresses of your devices that you want to control. You can create a bundle or attach to already exist a bundle by using the below commands respectively. \"create bundle\" command creates a bundle by including itself. \"attach to exist bundle\" command to attach to an already existing bundle. You can follow the pairing status by using the pairing status command when sending a pairing command. You can send move commands when the pairing status is \"ok\". \"Get Pairing Status\"","title":"1. Pairing with Wireless Channel"},{"location":"control.html#2-pairing-with-rj45","text":"The pairing with RJ45 is automatically paired with the connected device via a patch cable. Paired device(s) after completing pairing are called a bundle . But, you may want to control multiple devices; you need to pair it with the device connected with the Link Adapter. But RJ45 does not have any pairing ability, and the edelkrone SDK does not have any pair command for RJ45; you can use the edelkrone mobile application to pair them.","title":"2. Pairing with RJ45"},{"location":"control.html#2-pairing-canbus","text":"","title":"2. Pairing CanBus"},{"location":"control.html#how-to-get-the-status-of-the-edelkrone-device-in-the-bundle","text":"The bundle status is automatically updated from edelkrone devices when the pairing process is completed. The status contains paired devices information, supported axis, supported real-time axis, bundle state, axis values of the devices. You can get the status by using the command status end point .","title":"How to get the status of the edelkrone device in the bundle"},{"location":"control.html#send-move-command-to-your-bundle_1","text":"There are four types of movement. Except for real-time moves, other movement types can be controlled over HTTP API. But, HTTP has several overheads; therefore, you need to prefer Websocket Protocol to control in real-time. Also check for limitations .","title":"Send move command to your bundle"},{"location":"control.html#1-joystick_1","text":"This command takes the speed ratio in the axis to be moved and makes it move at that speed in that direction. This movement supports a five-axis that depends on your bundle. For example; Your bundle has three axes, for example, pan, tilt, and slide. And you want to send a move command in these three axes. Just add the axes you want and their speed ratio. You can also find more details about that api command here","title":"1. Joystick"},{"location":"control.html#2-keypose_1","text":"You can save up to six poses. You can make a loop between these poses, or you can send your bundle from a point you want to a pose you want.","title":"2. Keypose"},{"location":"control.html#1-keypose-store-current-pose_1","text":"When you send this command, a pose will be stored for you with an index number of your bundle at the moment. You can also find from here more details about that api command.","title":"1. Keypose Store Current Pose"},{"location":"control.html#2-keypose-store-by-numeric-data_1","text":"Numeric data means that your axis values, which are you want to save as pose. You can also find from here more details about that api command.","title":"2. Keypose Store By Numeric Data"},{"location":"control.html#3-keypose-move-with-fixed-duration_1","text":"You can make your bundle go from any point to a pose you want with this command. But this movement takes place with the fixed duration you give. But movement speed varies according to the given time. You can also find from here more details about that api command.","title":"3. Keypose Move with Fixed Duration"},{"location":"control.html#4-keypose-move-with-fixed-speed_1","text":"You can make your bundle go from any point to a pose you want with this command. But this movement takes place with the fixed speed ratio you give. But movement duration varies according to the given speed ratio. You can also find here more details about that api command.","title":"4. Keypose Move with Fixed Speed"},{"location":"control.html#5-loop-between-keyposes-with-fixed-duration_1","text":"This command can create loops between the poses you recorded. This movement takes place with the fixed duration you give. But movement speed varies according to the given time. You can also find more details about that api command here .","title":"5.  Loop Between Keyposes with Fixed Duration"},{"location":"control.html#5-loop-between-keyposes-with-fixed-speed_1","text":"With this command, you can create loops between the poses you recorded. This movement takes place with the fixed speed you give. But the duration of the movement varies according to the given speed ratio. You can also find from more details about that api command here .","title":"5.  Loop Between Keyposes with Fixed Speed"},{"location":"control.html#6-read-keypose-numeric-information_1","text":"With this command, you can read the axis values of the pose you stored. It takes an index as an argument and returns the information that you want. You can also find more details about that api command here .","title":"6. Read Keypose Numeric Information"},{"location":"control.html#7-delete-keypose_1","text":"When you store a keypose, it occupies a slot in a keypose list. If you need to add a new keypose, you need to delete keypose. You can also find from more details about that api command here .","title":"7. Delete Keypose"},{"location":"control.html#3-focus-move_1","text":"You can use it for focus movement when you plug a focus module into your head. You can also find more details about that api command here .","title":"3. Focus Move"},{"location":"control.html#4-real-time-move_1","text":"The supports Real-Time . Real-Time movement needs a reliable communication channel. So wireless connection does not support the real-time movement. The HTTP protocol has some overheads. You can also find more details about that api command here .","title":"4. Real-Time Move"},{"location":"definitions.html","text":"Definitions Daemon: Daemon means that a software runs as background process. To interact with it, you should use communication channel Pairing: Pairing means that one or several devices are connected to each other wirelessly or by cable. So there is a master device in paired device. Bundle: A paired device is called a Bundle. Master Device: The master device is in the main device in your bundle. All wireless communication goes through this device. Link Modules: Link Modules is the generic name for Stop Motion Module and Link Adapter modules. Link ID: Each link module has a unique id. Connection Type: Link modules have connection types that can be RJ45, Canbus, Wireless. Real-Time Move: Stop Motion Module supports a Real-Time move. You can therefore communicate in high frequency (~60FPS). Joyst\u0131ck Move: It runs like a joystick. It takes x-axis and y-axis values and sends them to the bundle as a speed ratio. Keypose Move: This is the name of the movements made to go between the recorded poses or to go to any pose.","title":"Definitions"},{"location":"definitions.html#definitions","text":"","title":"Definitions"},{"location":"definitions.html#daemon","text":"Daemon means that a software runs as background process. To interact with it, you should use communication channel","title":"Daemon:"},{"location":"definitions.html#pairing","text":"Pairing means that one or several devices are connected to each other wirelessly or by cable. So there is a master device in paired device.","title":"Pairing:"},{"location":"definitions.html#bundle","text":"A paired device is called a Bundle.","title":"Bundle:"},{"location":"definitions.html#master-device","text":"The master device is in the main device in your bundle. All wireless communication goes through this device.","title":"Master Device:"},{"location":"definitions.html#link-modules","text":"Link Modules is the generic name for Stop Motion Module and Link Adapter modules.","title":"Link Modules:"},{"location":"definitions.html#link-id","text":"Each link module has a unique id.","title":"Link ID:"},{"location":"definitions.html#connection-type","text":"Link modules have connection types that can be RJ45, Canbus, Wireless.","title":"Connection Type:"},{"location":"definitions.html#real-time-move","text":"Stop Motion Module supports a Real-Time move. You can therefore communicate in high frequency (~60FPS).","title":"Real-Time Move:"},{"location":"definitions.html#joystck-move","text":"It runs like a joystick. It takes x-axis and y-axis values and sends them to the bundle as a speed ratio.","title":"Joyst\u0131ck Move:"},{"location":"definitions.html#keypose-move","text":"This is the name of the movements made to go between the recorded poses or to go to any pose.","title":"Keypose Move:"},{"location":"flow.html","text":"Flow The edelkrone SDK is a daemon on your PC. It means that you should install it on your PC and it will run in the background. This section explains the steps of SDK connection and how to manage the connected device. Firstly check the below diagram; As you can see above, this diagram shows that you need a physical connection between your PC and the edelkrone devices. You can also check the diagram below to see how edelkrone SDK communicates with your device. You can be connecting to your device with the following steps: 1. Make sure your link module(s) are plugged into your pc As the diagrams above show, edelkrone SDK needs a physical connection to communicate with your device. Therefore, you should plug your link module into the PC. When you have plugged it in, The SDK will notify you about identified link modules. 2. Specify your requirements The requirements mean what your needs are. These can be real-time moves or managing multiple devices at the same time. For example; You need to manage multiple devices in real-time . Caution You should make sure that your link module meets your needs. It may be good to look at the comparison chart for the properties of the modules below before continuing to the document. 3. Choose Connection Types The connection methods vary with the type of link module. For example, you may want to move multiple devices over a wireless connection in real-time, but this type of connection type cannot do this. Or Stop Motion Module does not have this feature. Also, you can reach how you can control your bundles by your link modules from here . 4. Choose a corresponding API endpoint to consider limitations As you can see from the above diagrams, you can communicate with protocols that the SDK provides. These protocols are HTTP and Websocket , respectively. While choosing the API endpoint, consider the limitations. These limitations are related to connection types or types of move. For example; Some devices do not support some link modules. e.g., Stop Motion Module supports only Head Plus V1. Also check limitations from here . 5. Controlling your devices To control your device according to your needs and chosen communication protocol, you can continue from here . Also, you can found an example application in here , which is written with Python.","title":"Flow"},{"location":"flow.html#flow","text":"The edelkrone SDK is a daemon on your PC. It means that you should install it on your PC and it will run in the background. This section explains the steps of SDK connection and how to manage the connected device. Firstly check the below diagram; As you can see above, this diagram shows that you need a physical connection between your PC and the edelkrone devices. You can also check the diagram below to see how edelkrone SDK communicates with your device. You can be connecting to your device with the following steps:","title":"Flow"},{"location":"flow.html#1-make-sure-your-link-modules-are-plugged-into-your-pc","text":"As the diagrams above show, edelkrone SDK needs a physical connection to communicate with your device. Therefore, you should plug your link module into the PC. When you have plugged it in, The SDK will notify you about identified link modules.","title":"1. Make sure your link module(s) are plugged into your pc"},{"location":"flow.html#2-specify-your-requirements","text":"The requirements mean what your needs are. These can be real-time moves or managing multiple devices at the same time. For example; You need to manage multiple devices in real-time . Caution You should make sure that your link module meets your needs. It may be good to look at the comparison chart for the properties of the modules below before continuing to the document.","title":"2. Specify your requirements"},{"location":"flow.html#3-choose-connection-types","text":"The connection methods vary with the type of link module. For example, you may want to move multiple devices over a wireless connection in real-time, but this type of connection type cannot do this. Or Stop Motion Module does not have this feature. Also, you can reach how you can control your bundles by your link modules from here .","title":"3. Choose Connection Types"},{"location":"flow.html#4-choose-a-corresponding-api-endpoint-to-consider-limitations","text":"As you can see from the above diagrams, you can communicate with protocols that the SDK provides. These protocols are HTTP and Websocket , respectively. While choosing the API endpoint, consider the limitations. These limitations are related to connection types or types of move. For example; Some devices do not support some link modules. e.g., Stop Motion Module supports only Head Plus V1. Also check limitations from here .","title":"4. Choose a corresponding API endpoint to consider limitations"},{"location":"flow.html#5-controlling-your-devices","text":"To control your device according to your needs and chosen communication protocol, you can continue from here . Also, you can found an example application in here , which is written with Python.","title":"5. Controlling your devices"},{"location":"limitations.html","text":"Limitations There are several restrictions on communication, pairing, and movement. 1. Wireless Communication Wireless communication does not support real-time movement and real-time status. If your device is connected by cable and other devices in your bundle are connected with wireless, real-time communication only works with the cable-connected device. 2. The Stop Motion Module Pairing Stop Motion Module always connects to one device with a cable. It cannot connect to multiple devices or pair them. Therefore, if you want to manage more than one device, you should pair over the edelkrone mobile application as wireless connected. 3. HTTP and Websocket We recommend using a WebSocket when you need real-time (~60 FPS) movement. HTTP has several overheads because of protocol standards. On the other hand, Websockets can be complicated during their implementation. 4. SSL SDK does not support SSL communication. You should prefer direct communication (without SSL).","title":"Limitations"},{"location":"limitations.html#limitations","text":"There are several restrictions on communication, pairing, and movement.","title":"Limitations"},{"location":"limitations.html#1-wireless-communication","text":"Wireless communication does not support real-time movement and real-time status. If your device is connected by cable and other devices in your bundle are connected with wireless, real-time communication only works with the cable-connected device.","title":"1. Wireless Communication"},{"location":"limitations.html#2-the-stop-motion-module-pairing","text":"Stop Motion Module always connects to one device with a cable. It cannot connect to multiple devices or pair them. Therefore, if you want to manage more than one device, you should pair over the edelkrone mobile application as wireless connected.","title":"2. The Stop Motion Module Pairing"},{"location":"limitations.html#3-http-and-websocket","text":"We recommend using a WebSocket when you need real-time (~60 FPS) movement. HTTP has several overheads because of protocol standards. On the other hand, Websockets can be complicated during their implementation.","title":"3. HTTP and Websocket"},{"location":"limitations.html#4-ssl","text":"SDK does not support SSL communication. You should prefer direct communication (without SSL).","title":"4. SSL"},{"location":"overview.html","text":"Overview This guide aims to give you information and instructions about controlling your edelkrone devices over a PC. In addition, this document also explains: What is edelkrone SDK? The edelkrone SDK is actually a daemon on your PC. It means that you should install it on your PC and run it in the background. It provides an interface so that the edelkrone devices by can be managed by PC while running in the background. These interfaces are HTTP/REST API and WebSockets. How does SDK connect to devices? The connection is realized with Link Modules. Two types of Link Modules exist. The first is the edelkrone Stop Motion module, and the second is the Link adapter module. You can view them from here . How to connect edelkrone devices and your application to each other We assume that you have already completed the connections between your pc and edelkrone devices. The edelkrone SDK automatically scans link modules that are already plugged into your pc and then identifies them. If the connection is made successfully, SDK sends a notification to your OS notification system. Which programming language should you use to communicate with the SDK? You can use any programming language that supports HTTP and Websocket protocols. RESTful API The edelkrone SDK provides the REST API to users. The documentation can be reaching here Limitations There are varied limitations on connection, or your device combination cannot be feasible with your bundle setup. Also can check other restrictions from here App configurations You can configure some settings that edelkrone SDK has. Also, this document explains the workflow of edelkrone SDK.","title":"Overview"},{"location":"overview.html#overview","text":"This guide aims to give you information and instructions about controlling your edelkrone devices over a PC. In addition, this document also explains: What is edelkrone SDK? The edelkrone SDK is actually a daemon on your PC. It means that you should install it on your PC and run it in the background. It provides an interface so that the edelkrone devices by can be managed by PC while running in the background. These interfaces are HTTP/REST API and WebSockets. How does SDK connect to devices? The connection is realized with Link Modules. Two types of Link Modules exist. The first is the edelkrone Stop Motion module, and the second is the Link adapter module. You can view them from here . How to connect edelkrone devices and your application to each other We assume that you have already completed the connections between your pc and edelkrone devices. The edelkrone SDK automatically scans link modules that are already plugged into your pc and then identifies them. If the connection is made successfully, SDK sends a notification to your OS notification system. Which programming language should you use to communicate with the SDK? You can use any programming language that supports HTTP and Websocket protocols. RESTful API The edelkrone SDK provides the REST API to users. The documentation can be reaching here Limitations There are varied limitations on connection, or your device combination cannot be feasible with your bundle setup. Also can check other restrictions from here App configurations You can configure some settings that edelkrone SDK has. Also, this document explains the workflow of edelkrone SDK.","title":"Overview"},{"location":"release-notes.html","text":"","title":"Release Notes"},{"location":"tutorial_py.html","text":"Python Tutorial (Simple Keypose) In this page, you can find an example in Python to do basic tasks with edelkrone SDK # ----------------------------------------------------------------------------- # # # ----------------------------------------------------------------------------- import requests import datetime import websocket import functools import signal import json import time import sys # ----------------------------------------------------------------------------- # Required for Windows for better print experience. Either this or remember to # call python with -u option every time. # ----------------------------------------------------------------------------- print = functools.partial(print, flush=True) # ----------------------------------------------------------------------------- # Urls for websocket and http requests # ----------------------------------------------------------------------------- httpURL = \"http://127.0.0.1:32222/edelkrone\" wsURL = \"ws://127.0.0.1:32222/edelkrone\" # ----------------------------------------------------------------------------- def linkDevicesQuery(debug=False): # ... url = httpURL + \"/device\" payload = {\"command\": \"device_found_list\"} headers = {\"Content-Type\": \"application/json\"} # ... response = requests.request(\"GET\", url, headers=headers, json=payload, timeout=1) response_json = json.loads(response.text) # ... if(debug == True): print(\"\") print(\"LINK DEVICES QUERY\") print(\"==================\\n\") print(json.dumps(response_json, indent=2)) # ... return response_json # --------------------------------------------------------------------------- def statusQuery(socket, debug=False): # ... socket.send(json.dumps({})) response = socket.recv() response_json = json.loads(response) # ... if(debug == True): print(\"\") print(\"PERIODIC STATUS\") print(\"===============\\n\") print(json.dumps(response_json, indent=2)) # ... return response_json # --------------------------------------------------------------------------- def connectToBundle_stopMotionModule(bundleID): # ... url = httpURL + \"/device\" payload = {\"command\": \"bundle_connect\", \"uniqueID\": bundleID} headers = {\"Content-Type\": \"application/json\"} # ... response = requests.request(\"GET\", url, headers=headers, json=payload, timeout=1) response_json = json.loads(response.text) return response_json # --------------------------------------------------------------------------- def keyposeStoreNumeric(bundleID, pan, tilt, slide, focus, index): # ... url = httpURL + \"/device/\" + bundleID payload = { \"command\": \"keypose_store_numeric\", \"tilt\": tilt, \"pan\": pan, \"slide\": slide, \"focus\": focus, \"index\": index, \"uniqueID\": 1610356720 } headers = {\"Content-Type\": \"application/json\"} # ... response = requests.request(\"POST\", url, headers=headers, json=payload, timeout=1) response_json = json.loads(response.text) return response_json # --------------------------------------------------------------------------- def keyposeMoveFixSpeed( bundleID, startIndex, aimIndex, is_loop, accelIn, accelOut, relativeSpeed ): # ... url = httpURL + \"/device/\" + bundleID payload = { \"command\": \"keypose_move_fixed_speed\", \"start_index\": startIndex, \"aim_index\": aimIndex, \"is_loop\": is_loop, \"accel_in_ratio\": accelIn, \"accel_out_ratio\": accelOut, \"relative_speed\": relativeSpeed, } headers = {\"Content-Type\": \"application/json\"} # ... response = requests.request(\"POST\", url, headers=headers, json=payload, timeout=1) response_json = json.loads(response.text) return response_json # --------------------------------------------------------------------------- def keyposeAbortMotion(bundleID): # ... url = httpURL + \"/device/\" + bundleID payload = {\"command\": \"keypose_abort\"} headers = {\"Content-Type\": \"application/json\"} # ... response = requests.request(\"POST\", url, headers=headers, json=payload, timeout=1) response_json = json.loads(response.text) return response_json # --------------------------------------------------------------------------- if __name__ == \"__main__\": # ... signal.signal(signal.SIGINT, signal.SIG_DFL) # List currently connected link devices linkDevices = linkDevicesQuery(debug=True) # Get the bundleID (First one in the list) bundleID = linkDevices[\"device_list\"][0][\"uniqueID\"] # ... connectToBundle_stopMotionModule(bundleID) time.sleep(0.1) # Without this delay, daemon crashes # ... keyposeAbortMotion(bundleID) print(\"\\nKeypose abort motion\") time.sleep(1.0) # ... pan = 90.0 tilt = -30.0 slide = 0.0 focus = 0.0 index = 0 keyposeStoreNumeric(bundleID, pan, tilt, slide, focus, index) print(\"\\nKeypose storeNumeric slot#%d\" % index) time.sleep(0.1) # ... pan = -30.0 tilt = 90.0 slide = 20.0 focus = 0.0 index = 1 keyposeStoreNumeric(bundleID, pan, tilt, slide, focus, index) print(\"\\nKeypose storeNumeric slot#%d\" % index) time.sleep(0.1) # ... startIndex = 0 aimIndex = 1 is_loop = True accelIn = 0.4 accelOut = 0.4 relativeSpeed = 0.9 keyposeMoveFixSpeed( bundleID, startIndex, aimIndex, is_loop, accelIn, accelOut, relativeSpeed ) # Create the URL and connect to websocket wsURL_status = wsURL + \"/device/\" + bundleID + \"/status\" statusWebSocket = websocket.WebSocket() statusWebSocket.connect(wsURL_status) # ... start = datetime.datetime.now() lastStatus = datetime.datetime.now() while(True): # ... now = datetime.datetime.now() # ... start_delta = now - start lastStatus_delta = now - lastStatus # ... if(lastStatus_delta.total_seconds() > 0.015): lastStatus = now statusQuery(statusWebSocket, debug=True) # ... if(start_delta.total_seconds() > 20): break # ... keyposeAbortMotion(bundleID)","title":"Example Code"},{"location":"tutorial_py.html#python-tutorial-simple-keypose","text":"In this page, you can find an example in Python to do basic tasks with edelkrone SDK # ----------------------------------------------------------------------------- # # # ----------------------------------------------------------------------------- import requests import datetime import websocket import functools import signal import json import time import sys # ----------------------------------------------------------------------------- # Required for Windows for better print experience. Either this or remember to # call python with -u option every time. # ----------------------------------------------------------------------------- print = functools.partial(print, flush=True) # ----------------------------------------------------------------------------- # Urls for websocket and http requests # ----------------------------------------------------------------------------- httpURL = \"http://127.0.0.1:32222/edelkrone\" wsURL = \"ws://127.0.0.1:32222/edelkrone\" # ----------------------------------------------------------------------------- def linkDevicesQuery(debug=False): # ... url = httpURL + \"/device\" payload = {\"command\": \"device_found_list\"} headers = {\"Content-Type\": \"application/json\"} # ... response = requests.request(\"GET\", url, headers=headers, json=payload, timeout=1) response_json = json.loads(response.text) # ... if(debug == True): print(\"\") print(\"LINK DEVICES QUERY\") print(\"==================\\n\") print(json.dumps(response_json, indent=2)) # ... return response_json # --------------------------------------------------------------------------- def statusQuery(socket, debug=False): # ... socket.send(json.dumps({})) response = socket.recv() response_json = json.loads(response) # ... if(debug == True): print(\"\") print(\"PERIODIC STATUS\") print(\"===============\\n\") print(json.dumps(response_json, indent=2)) # ... return response_json # --------------------------------------------------------------------------- def connectToBundle_stopMotionModule(bundleID): # ... url = httpURL + \"/device\" payload = {\"command\": \"bundle_connect\", \"uniqueID\": bundleID} headers = {\"Content-Type\": \"application/json\"} # ... response = requests.request(\"GET\", url, headers=headers, json=payload, timeout=1) response_json = json.loads(response.text) return response_json # --------------------------------------------------------------------------- def keyposeStoreNumeric(bundleID, pan, tilt, slide, focus, index): # ... url = httpURL + \"/device/\" + bundleID payload = { \"command\": \"keypose_store_numeric\", \"tilt\": tilt, \"pan\": pan, \"slide\": slide, \"focus\": focus, \"index\": index, \"uniqueID\": 1610356720 } headers = {\"Content-Type\": \"application/json\"} # ... response = requests.request(\"POST\", url, headers=headers, json=payload, timeout=1) response_json = json.loads(response.text) return response_json # --------------------------------------------------------------------------- def keyposeMoveFixSpeed( bundleID, startIndex, aimIndex, is_loop, accelIn, accelOut, relativeSpeed ): # ... url = httpURL + \"/device/\" + bundleID payload = { \"command\": \"keypose_move_fixed_speed\", \"start_index\": startIndex, \"aim_index\": aimIndex, \"is_loop\": is_loop, \"accel_in_ratio\": accelIn, \"accel_out_ratio\": accelOut, \"relative_speed\": relativeSpeed, } headers = {\"Content-Type\": \"application/json\"} # ... response = requests.request(\"POST\", url, headers=headers, json=payload, timeout=1) response_json = json.loads(response.text) return response_json # --------------------------------------------------------------------------- def keyposeAbortMotion(bundleID): # ... url = httpURL + \"/device/\" + bundleID payload = {\"command\": \"keypose_abort\"} headers = {\"Content-Type\": \"application/json\"} # ... response = requests.request(\"POST\", url, headers=headers, json=payload, timeout=1) response_json = json.loads(response.text) return response_json # --------------------------------------------------------------------------- if __name__ == \"__main__\": # ... signal.signal(signal.SIGINT, signal.SIG_DFL) # List currently connected link devices linkDevices = linkDevicesQuery(debug=True) # Get the bundleID (First one in the list) bundleID = linkDevices[\"device_list\"][0][\"uniqueID\"] # ... connectToBundle_stopMotionModule(bundleID) time.sleep(0.1) # Without this delay, daemon crashes # ... keyposeAbortMotion(bundleID) print(\"\\nKeypose abort motion\") time.sleep(1.0) # ... pan = 90.0 tilt = -30.0 slide = 0.0 focus = 0.0 index = 0 keyposeStoreNumeric(bundleID, pan, tilt, slide, focus, index) print(\"\\nKeypose storeNumeric slot#%d\" % index) time.sleep(0.1) # ... pan = -30.0 tilt = 90.0 slide = 20.0 focus = 0.0 index = 1 keyposeStoreNumeric(bundleID, pan, tilt, slide, focus, index) print(\"\\nKeypose storeNumeric slot#%d\" % index) time.sleep(0.1) # ... startIndex = 0 aimIndex = 1 is_loop = True accelIn = 0.4 accelOut = 0.4 relativeSpeed = 0.9 keyposeMoveFixSpeed( bundleID, startIndex, aimIndex, is_loop, accelIn, accelOut, relativeSpeed ) # Create the URL and connect to websocket wsURL_status = wsURL + \"/device/\" + bundleID + \"/status\" statusWebSocket = websocket.WebSocket() statusWebSocket.connect(wsURL_status) # ... start = datetime.datetime.now() lastStatus = datetime.datetime.now() while(True): # ... now = datetime.datetime.now() # ... start_delta = now - start lastStatus_delta = now - lastStatus # ... if(lastStatus_delta.total_seconds() > 0.015): lastStatus = now statusQuery(statusWebSocket, debug=True) # ... if(start_delta.total_seconds() > 20): break # ... keyposeAbortMotion(bundleID)","title":"Python Tutorial (Simple Keypose)"},{"location":"endpoints/endpoints_http.html","text":"HTTP Endpoints You can communicate with HTTP/REST api over edelkrone SDK. Caution The SDK supports the only version of HTTP/1.1. Note SDK does not provide an SSL connection. So you can only connect over HTTP. Caution The SDK does not supported CORS, so when you send a request with \"OPTIONS\" method, the SDK return a error because a HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Pairing Pairing means that the devices are connected to each other and can also communicate. The PC communicates over link devices with paired devices. In addition, paired devices are called \"Bundle\". You can also check What is Bundle? Wifi Initiate wireless scan URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because a HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"wirelessPairingScanStart\" } Label Type Value Description command string wirelessPairingScanStart command name Return value See default return values . Get current wireless scan results URL /v1/link/{linkID} Method POST Caution The SDK does not supported CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"wirelessPairingScanResults\" } Label Type Description command string wirelessPairingScanResults Return value { \"data\": [ { \"deviceFirmware\": 18, \"groupId\": 65535, \"isDeviceFirmwareUpdateAvailable\": false, \"isRadioFirmwareUpdateAvailable\": false, \"linkPairigingActive\": true, \"mac\": \"A4:E5:7C:CF:4F:66\", \"radioFirmware\": 32, \"rssi\": -32.0, \"setup\": \"groupMember\", \"type\": \"slideModuleV3\" }, { \"deviceFirmware\": 101, \"groupId\": 23113, \"isDeviceFirmwareUpdateAvailable\": false, \"isRadioFirmwareUpdateAvailable\": false, \"mac\": \"E8:DB:84:2C:C4:76\", \"radioFirmware\": 32, \"rssi\": -76.0, \"setup\": \"panTilt\", \"type\": \"headPlusV2\" }, { \"deviceFirmware\": 101, \"groupId\": 65535, \"isDeviceFirmwareUpdateAvailable\": false, \"isRadioFirmwareUpdateAvailable\": false, \"linkPairigingActive\": true, \"mac\": \"E8:DB:84:2C:D2:AE\", \"radioFirmware\": 33, \"rssi\": -58.0, \"setup\": \"panTiltAndSlide\", \"type\": \"headPlusV2\" }, { \"deviceFirmware\": 101, \"groupId\": 16519, \"isDeviceFirmwareUpdateAvailable\": false, \"isRadioFirmwareUpdateAvailable\": false, \"mac\": \"98:F4:AB:21:A7:7E\", \"radioFirmware\": 32, \"rssi\": -66.0, \"setup\": \"panTilt\", \"type\": \"headPlusProV2\" } ], \"result\": \"ok\" } Label Type Value Description data device array [deviceinfo1, deviceinfo2] Array of information of devices on canbus Label Type Value Description deviceFirmware int Device fimrware number groupId int Which group device is in linkPairigingActive bool IsTilted bool mac string FF:FF:FF:FF:FF:FF Mac address as string, it should be hex string rssi int Received signal strength indication isDeviceFirmwareUpdateAvailable bool If there is exist a update available, this flag will be true isRadioFirmwareUpdateAvailable bool If there is exist a update available, this flag will be true radioFirmware int Radio Firmware Version setup string If device is master device: panOnly tiltOnly panTilt slideOnly dollyOnly panAndSlide tiltAndSlide panAndDolly tiltAndDolly panTiltAndSlide panTiltAndDolly panAndJib tiltAndJib panTiltAndJib jibOnly panAndJibPlus tiltAndJibPlus panTiltAndJibPlus jibPlusOnly followFocusOnly possibleCanbusMaster If it is only bundle member: groupMember If it is not paired yet: none Other state: bootingUp firmwareError ignore - type string - Device Type Device Type slideModule headPlus headPlusPro headOne surfaceOne dollyPlus sliderOnePro sliderOne dollyOne dollyPlusPro jibOne goldFinch slideModuleV3 panPro jibOneMk2 focusPlusPro headPlusV2 headPlusProV2 slideModuleV1 none Note The scan wireless command should be sent before that command is sent. Otherwise, Link adapter does not return any device info. Create Bundle Pairs devices and joins to them. URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK return a error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"wirelessPairingCreateBundle\", \"deviceCount\": 1, \"forcedMasterDevice\": \"none\", \"macList\": [ \"E8:68:E7:2E:B5:E2\" ] } Label Type Value Description command string wirelessPairingCreateBundle command name deviceCount integer 0 - ... Number of device to be paired forcedMasterDevice string - Forced Device Type macList string FF:FF:FF:FF:FF:FF Mac list of devices. Mac pattern should be like \"xx:xx:xx:xx:xx\" Forced Master Device slideModule headPlus headPlusPro headOne surfaceOne dollyPlus sliderOnePro sliderOne dollyOne dollyPlusPro jibOne goldFinch slideModuleV3 panPro jibOneMk2 focusPlusPro headPlusV2 headPlusProV2 slideModuleV1 none Return value See default return values . Note The send mac addresses are reachable while creating the bundle. Otherwise, the pairing process will be crashed, in which case get pair state by using this command . Attach to Exist Bundle Attach to already existing paired devices. URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"wirelessPairingAttachToBundle\", \"mac\": \"30:AE:A4:8F:B1:46\" } Label Type Value Description command string wirelessPairingAttachToBundle command name mac string FF:FF:FF:FF:FF:FF Which device mac you want to connect. Mac pattern should be like \"xx:xx:xx:xx:xx\" Return value See default return values . Note The send mac addresses are reachable while creating the bundle. Otherwise, the pairing process will be crashed, in which case get pair state by using this command . Get Pairing Status URL /v1/link/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"wirelessPairingStatus\" } Label Type Value Description command string wirelessPairingStatus command name Return value { \"data\": { \"lastPairError\": \"none\", \"wirelessPairState\": \"idle\" }, \"result\": \"ok\" } Label Type Value Description lastPairError string none wifiChannelMismatch impossibleScenario radioFirmwareUpdateRequired deviceFirmwareUpdateRequired unknown deviceSearchProblem alreadyGroupMember connectionProblem Last pair error pairState string idle connecting connectionOk problem Disconnect from bundle URL /v1/link/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"disconnect\" } Label Type Value Description command string disconnect command name Return value See default return values . Default Return Values { \"result\": \"ok\" } System executed your command without any issues. { \"result\": \"Invalid Arguments\" } Given arguments are invalid. Link Get Link Devices results URL /v1/link/{linkID} Method POST Caution The SDK does not supported CORS, so when you send a request with \"OPTIONS\" method, the SDK return a error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"link2PairingScanResults\" } Label Type Value Description command string link2PairingScanResults command name Return value { \"data\": [ { \"firmwareVersionMajor\": 0, \"firmwareVersionMinor\": 18, \"isDeviceFirmwareUpdateAvailable\": false, \"type\": \"slideModuleV3\" }, { \"firmwareVersionMajor\": 0, \"firmwareVersionMinor\": 101, \"isDeviceFirmwareUpdateAvailable\": false, \"type\": \"headPlusV2\" } ], \"result\": \"ok\" } Label Type Value Description data device array [deviceinfo1, deviceinfo2] Array of information of devices on Link Label Type Value Description type string - Device Type firmwareVersionMajor int - Device Firmware Major Version firmwareVersionMinor int - Device fimrware Minor number isDeviceFirmwareUpdateAvailable bool - If there is exist a update available, this flag will be true Device Type slideModule headPlus headPlusPro headOne surfaceOne dollyPlus sliderOnePro sliderOne dollyOne dollyPlusPro jibOne goldFinch slideModuleV3 panPro jibOneMk2 focusPlusPro headPlusV2 headPlusProV2 slideModuleV1 none Connect to Bundle Pairs devices and joins to them. URL /v1/link/{linkID} Method POST Caution The SDK does not supported CORS, so when you send a request with the \"OPTIONS\" method, the SDK returns an error because of HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"link2PairingConnect\" } Label Type Value Description command string link2PairingConnect command name Return value See default return values . Get Pairing Status URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"link2PairingStatus\" } Label Type Value Description command string link2PairingStatus command name Return value { \"data\": { \"canbusPairState\": \"pingReceived\", \"lastPairError\": \"none\" }, \"result\": \"ok\" } Label Type Value Description canbusPairState string idle pingReceived connecting connectionOk Master device state lastPairError string none imposiblleScenario deviceFirmwareUpdateRequired unknown cantAppendDevice Disconnect from bundle URL /v1/link/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"disconnect\" } Label Type Value Description command string disconnect command name Return value See default return values . Default Return Values { \"result\": \"ok\" } System executed your command without any issues. { \"result\": \"Invalid Arguments\" } Given arguments are invalid. RJ45 Connect to Bundle Pairs devices and joins to them. URL /v1/link/{linkID} Method POST Caution The SDK does not supported CORS, so when you send a request with \"OPTIONS\" method, the SDK return a error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"link1PairingConnect\" } Label Type Value Description command string link1PairingConnect command name Return value See default return values . Default Return Values { \"result\": \"ok\" } System executed your command without any issues. { \"result\": \"Invalid Arguments\" } Given arguments are invalid. { \"result\": \"Device is paired\" } Pairing is complete so no longer send any movement command Keypose This commands is related to simple pose store and recall methods. Keypose Store Current Pose URL /v1/bundle/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"keyposeStoreCurrentPose\", \"index\": 0, } Label Type Value Description command string keyposeStoreCurrentPose command name index integer 0 - 5 Keypose slot you want to store the current pose Return value See default return values . Note Use this command to store your overall pose as a keypose. You can move your system to this location later by referencing with index. Keypose Store by Numeric Data URL /v1/bundle/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK return a error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"keyposeStoreWithNumericData\", \"index\":0, \"{axis name}\":\"{setpoint value}\" } Label Type Value Description command string keyposeStoreWithNumericData command name index integer 0 - 5 Keypose slot index you want to move axis name float In which axis direction you want to move Axis Name Type Value Range headPan float -180.0 - +180.0 headTilt float -180.0 - +180.0 slide float It depends your calibrations. focus float jibPlusPan float jibPlusTilt float Example JSON You want to send command for three axes; Head Pan, Head Tilt and Slide; { \"command\":\"keyposeStoreWithNumericData\", \"index\":0, \"headPan\":0.0, \"headTilt\":0.0, \"slide\":0.0, } Return value See default return values . Keypose Move with Fixed Duration URL POST /v1/bundle/{linkID} Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"keyposeMoveFixedDuration\", \"index\":0, \"duration\":0.5, \"acceleration\":0.0 } Label Type Value Description command string keyposeMoveFixedDuration command name index integer 0-5 Keypose slot index you want to move acceleration float 0.0 - 1.0 Ease in / out amount. 0.0 is immediate move, 1.0 is most smooth duration float second Planned motion duration Note System doesn't guarantee that every movement will be completed as requested. If requested duration is lower than what system can achieve with 100% speed, system moves with 100% speed. Keypose Move with Fixed Speed URL POST /v1/bundle/{linkID} Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Method POST Payload { \"command\": \"keyposeMoveFixedSpeed\", \"index\": 0, \"acceleration\": 0.5, \"speed\": 8.0, } Label Type Value Description command string keyposeMoveFixedSpeed command name index integer 0-5 Keypose slot index you want to move acceleration float 0.0 - 1.0 Ease in / out amount. 0.0 is immediate move, 1.0 is most smooth speed float -1.0 - +1.0 Speed ratio for motion Note System doesn't guarantee that every movement will be completed as requested. If requested duration is lower than what system can achieve with 100% speed, system moves with 100% speed. Loop Between Keyposes with Fixed Duration URL POST /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"keyposeLoopFixedDuration\", \"index1\":0, \"index2\":1, \"duration\":0.0, \"acceleration\":0.0 } Label Type Value Description command string keyposeMoveFixedDuration command name index1 integer 0 - 5 index2 integer 0 - 5 acceleration float 0.0 - 1.0 Ease in / out amount. 0.0 is immediate move, 1.0 is most smooth duration float second Planned motion duration Note System doesn't guarantee that every movement will be completed as requested. If requested duration is lower than what system can achieve with 100% speed, system moves with 100% speed. Loop Between Keyposes with Fixed Speed URL POST /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\".. Payload { \"command\": \"keyposeLoopFixedSpeed\", \"index1\": 0, \"index2\": 0, \"acceleration\": 0.5, \"speed\": 8.0, } Label Type Value Description command string keyposeLoopFixedSpeed command name index1 integer 0 - 5 Keypose slot index you want to move acceleartion float 0.0 - 1.0 Ease in / out amount. 0.0 is immediate move, 1.0 is most smooth speed float -1.0 - +1.0 Speed ratio for motion Note System doesn't guarantee to move within you ask for it. If requested duration is lower than what system can achive with %100 speed, system moves with %100 speed. Read Keypose Numeric Information URL POST /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"keyposeReadNumericValues\", \"index\": 0 } Label Type Value Description command string keyposeReadNumericValues command name index integer 0 - 5 Keypose slot index you want to get information about keypose Return value { \"data\": { \"{axis_name}\": \"{set_point}\", }, \"result\": \"ok\" } Example Return { \"data\": { \"focus\": 0, \"headPan\": 0.0, \"headTilt\": 0.0, \"index\": 0, \"jibPlusPan\": -1.0, \"jibPlusTilt\": -1.0, \"slide\": 0.0 }, \"result\": \"ok\" } Label Type Value Description data string none running error multipleDevice noDevice finished Update status Axis Name Type Value Range headPan float -180.0 - +180.0 headTilt float -180.0 - +180.0 slide float It depends your calibrations. focus float jibPlusPan float jibPlusTilt float Delete Keypose TO BE FILLED URL POST /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"keyposeDeletePose\", \"index\":1 } Label Type Value Description command string keyposeDeletePose command name index integer 0 - 5 Keypose slot index you want to get information about keypose Default Return Values { \"result\": \"ok\" } Given arguments are invalid. { \"result\": \"invalid setup\" } Given device is invalid Move This command relates to move methods. Joystick Move URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"joystickMove\", \"{axis_name}\": \"{speed_ratio}\" } Label Type Value Description command string joystickMove command name axis_name float - In which axis direction you want to move and its speed ratio. Axis Name Type Value Range headPan float -180.0 - +180.0 headTilt float -180.0 - +180.0 slide float It depends your calibrations. focus float jibPlusPan float jibPlusTilt float Note As in the example below, the desired direction to move must be given as the key and the speed value as a value. Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Example JSON You want to send command for three axes; Head Pan, Head Tilt and Slide; { \"command\":\"joystickMove\", \"index\":0, \"headPan\":0.0, \"headTilt\":0.0, \"slide\":0.0, } Focus Manual Move URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"focusManualMove\", \"deltaEnc\": 10 } Label Type Value Description command string focusManualMove command name deltaEnc integer `` encoder step Motion Abort URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"motionAbort\" } Label Type Value Description command string motionAbort command name Calibration URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"calibrate\", \"device\": \"slideModuleV3\", \"isOnGround\": true, \"isOnLeftSide\" : false, \"jibLength\" = 2, \"rodLength\" = 3 } |Label| Type | Value |Description| |:--- |:---- |:-----------| | command | string | motionAbort |calibrate name| | device | string | Each device has own configuratation | Which axis you want to calibrate it.| | jibLength | float | | length of jib| | rodLength | float | | length of camera rod of jib| | isOnGround | bool | | If slider is on tripod, it should be true| | isOnLeftSide | bool | | If slide module is left side of slider, it should be true otherwise it will be false | `slideModule` `headPlus` `headPlusPro` `headOne` `surfaceOne` `dollyPlus` `sliderOnePro` `sliderOne` `dollyOne` `dollyPlusPro` `jibOne` `goldFinch` `slideModuleV3` `panPro` `jibOneMk2` `focusPlusPro` `headPlusV2` `headPlusProV2` `slideModuleV1` `none` Device Type Need Parameter slideModule isOnGround isOnLeftSide headPlus - headPlusPro - headOne - surfaceOne - dollyPlus - sliderOnePro isOnGround isOnLeftSide sliderOne isOnGround isOnLeftSide dollyOne - dollyPlusPro - jibOne jibLength rodLength goldFinch - slideModuleV3 isOnGround isOnLeftSide panPro - jibOneMk2 - focusPlusPro - headPlusV2 - headPlusProV2 - slideModuleV1 - none - Example JSON You may want to send command for three axes; Head Pan, Head Tilt and Slide; { \"command\": \"calibrate\", \"device\": \"slideModuleV3\", \"isOnGround\": true, \"isOnLeftSide\" : false } Numeric Limits Each axis has specific limit value and step value, this command returns these. URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"numericLimitValues\" } Label Type Value Description command string numericLimitValues command name Return value { \"pan_maxLimit\": 36000.0, \"pan_minLimit\": -36000.0, \"pan_step\": 0.0006099999882280827, \"result\": \"ok\", \"tilt_maxLimit\": 89.0999984741211, \"tilt_minLimit\": -89.0999984741211, \"tilt_step\": 0.0006099999882280827 } Label Type Value Description panMaxLimit float list panMinLimit float panStep float tiltMaxLimit float tiltMinLimit float tiltStep float focusMaxLimit float focusMinLimit float focusStep float jibPanMaxLimit float jibPanMinLimit float jibPanStep float jibTiltMaxLimit float jibTiltMinLimit float jibPanStep float isDataReady bool Default Return Values { \"result\": \"ok\" } System executed your command without any issues. { \"result\": \"invalid setup\" } Given device is invalid Status This command relates to move methods. URL /bundle/{linkID}/status Method GET Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Return value { \"data\": { \"calibratedAxes\": [ { \"axis\": \"headPan\", \"device\": \"headPlusV2\" }, { \"axis\": \"headTilt\", \"device\": \"headPlusV2\" } ], \"deviceInfo\": [ { \"batteryLevel\": 1.0, \"deviceFirmwareVersion\": 101, \"type\": \"headPlusV2\" } ], \"deviceInfoEverythingReady\": true, \"keyposeLoopActive\": false, \"keyposeMotionAimIndex\": 0, \"keyposeMotionStartIndex\": 0, \"keyposeSlotsFilled\": [ false, false, false, false, false, false ], \"plannedMotionProgress\": 1.0, \"plannedMotionSecs\": 0.0, \"readings\": { \"headPan\": 89.95600128173828, \"headTilt\": 0.0 }, \"realTimeSupportedAxes\": [], \"state\": \"idle\", \"supportedAxes\": [ { \"axis\": \"headPan\", \"device\": \"headPlusV2\" }, { \"axis\": \"headTilt\", \"device\": \"headPlusV2\" } ], \"timestampDevice\": 303462, \"timestampEpoch\": 1634645133077 }, \"result\": \"ok\" } Label Type Value Description calibratedAxes string array Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt Calibrated axes as string array deviceInfo device info array Each elements describes in below table Array of information of devices deviceInfoEverythingReady bool true - false It means that when it is true, that can get information. Otherwise, you can not get information. keyposeLoopActive bool true - false It means that if it is true, your bundle is looping between the specified keypose indexes. keyposeMotionAimIndex int 0 - 5 aim index for keypose motion. keyposeMotionStartIndex int 0 - 5 Index that before start keypose motion. keyposeSlotsFilled bool array true - false Array has six elements, each element represents that whether index is filled. plannedMotionProgress float 0.0 - 1.0 It shows the percentage of how many complete of keypose motion. It is mapped between 0.0 - 1.0. plannedMotionSecs float How many seconds the keypose motion will take readings key-value pair array Each elements describes in below table Array of information of each axis realTimeSupportedAxes string array Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt Which axes the bundle has are supported in Real-Time Move. state string Idle Keypose_Move RealTime_Move Focus_Calibration Slider_Calibration Joystick_Move Unsupported_Activity Shows state of the bundle movement. timestampDevice long int The status was generated at this timestamp on the master device. timestampEpoch long int The status was grabbed from the SDK at this timestamp. Label Type Value Description deviceFirmwareVersion int Device fimrware version batteryLevel int 0 - 100 Battery level type string - Device Type Device Type slideModule headPlus headPlusPro headOne surfaceOne dollyPlus sliderOnePro sliderOne dollyOne dollyPlusPro jibOne goldFinch slideModuleV3 panPro jibOneMk2 focusPlusPro headPlusV2 headPlusProV2 slideModuleV1 none Label Type Value Description readings It may consist of one or more of the following: Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt float Head_Pan: -180 - 180 Head_Tilt: -180 - 180 Slide: Focus: Jib_Pan: Jib_Tilt: In which axis direction you want to move and its speed ratio. Note You need to ask for this manually at regular intervals. Each request will return a status data without waiting for the contents to be updated. If you want to differentiate whether status is changed or not, you can use the TimestampEpoch field value. Other Details ...","title":"HTTP"},{"location":"endpoints/endpoints_http.html#http-endpoints","text":"You can communicate with HTTP/REST api over edelkrone SDK. Caution The SDK supports the only version of HTTP/1.1. Note SDK does not provide an SSL connection. So you can only connect over HTTP. Caution The SDK does not supported CORS, so when you send a request with \"OPTIONS\" method, the SDK return a error because a HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\".","title":"HTTP Endpoints"},{"location":"endpoints/endpoints_http.html#pairing","text":"Pairing means that the devices are connected to each other and can also communicate. The PC communicates over link devices with paired devices. In addition, paired devices are called \"Bundle\". You can also check What is Bundle?","title":"Pairing"},{"location":"endpoints/endpoints_http.html#wifi","text":"","title":"Wifi"},{"location":"endpoints/endpoints_http.html#initiate-wireless-scan","text":"URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because a HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"wirelessPairingScanStart\" } Label Type Value Description command string wirelessPairingScanStart command name Return value See default return values .","title":"Initiate wireless scan"},{"location":"endpoints/endpoints_http.html#get-current-wireless-scan-results","text":"URL /v1/link/{linkID} Method POST Caution The SDK does not supported CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"wirelessPairingScanResults\" } Label Type Description command string wirelessPairingScanResults Return value { \"data\": [ { \"deviceFirmware\": 18, \"groupId\": 65535, \"isDeviceFirmwareUpdateAvailable\": false, \"isRadioFirmwareUpdateAvailable\": false, \"linkPairigingActive\": true, \"mac\": \"A4:E5:7C:CF:4F:66\", \"radioFirmware\": 32, \"rssi\": -32.0, \"setup\": \"groupMember\", \"type\": \"slideModuleV3\" }, { \"deviceFirmware\": 101, \"groupId\": 23113, \"isDeviceFirmwareUpdateAvailable\": false, \"isRadioFirmwareUpdateAvailable\": false, \"mac\": \"E8:DB:84:2C:C4:76\", \"radioFirmware\": 32, \"rssi\": -76.0, \"setup\": \"panTilt\", \"type\": \"headPlusV2\" }, { \"deviceFirmware\": 101, \"groupId\": 65535, \"isDeviceFirmwareUpdateAvailable\": false, \"isRadioFirmwareUpdateAvailable\": false, \"linkPairigingActive\": true, \"mac\": \"E8:DB:84:2C:D2:AE\", \"radioFirmware\": 33, \"rssi\": -58.0, \"setup\": \"panTiltAndSlide\", \"type\": \"headPlusV2\" }, { \"deviceFirmware\": 101, \"groupId\": 16519, \"isDeviceFirmwareUpdateAvailable\": false, \"isRadioFirmwareUpdateAvailable\": false, \"mac\": \"98:F4:AB:21:A7:7E\", \"radioFirmware\": 32, \"rssi\": -66.0, \"setup\": \"panTilt\", \"type\": \"headPlusProV2\" } ], \"result\": \"ok\" } Label Type Value Description data device array [deviceinfo1, deviceinfo2] Array of information of devices on canbus Label Type Value Description deviceFirmware int Device fimrware number groupId int Which group device is in linkPairigingActive bool IsTilted bool mac string FF:FF:FF:FF:FF:FF Mac address as string, it should be hex string rssi int Received signal strength indication isDeviceFirmwareUpdateAvailable bool If there is exist a update available, this flag will be true isRadioFirmwareUpdateAvailable bool If there is exist a update available, this flag will be true radioFirmware int Radio Firmware Version setup string If device is master device: panOnly tiltOnly panTilt slideOnly dollyOnly panAndSlide tiltAndSlide panAndDolly tiltAndDolly panTiltAndSlide panTiltAndDolly panAndJib tiltAndJib panTiltAndJib jibOnly panAndJibPlus tiltAndJibPlus panTiltAndJibPlus jibPlusOnly followFocusOnly possibleCanbusMaster If it is only bundle member: groupMember If it is not paired yet: none Other state: bootingUp firmwareError ignore - type string - Device Type Device Type slideModule headPlus headPlusPro headOne surfaceOne dollyPlus sliderOnePro sliderOne dollyOne dollyPlusPro jibOne goldFinch slideModuleV3 panPro jibOneMk2 focusPlusPro headPlusV2 headPlusProV2 slideModuleV1 none Note The scan wireless command should be sent before that command is sent. Otherwise, Link adapter does not return any device info.","title":"Get current wireless scan results"},{"location":"endpoints/endpoints_http.html#create-bundle","text":"Pairs devices and joins to them. URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK return a error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"wirelessPairingCreateBundle\", \"deviceCount\": 1, \"forcedMasterDevice\": \"none\", \"macList\": [ \"E8:68:E7:2E:B5:E2\" ] } Label Type Value Description command string wirelessPairingCreateBundle command name deviceCount integer 0 - ... Number of device to be paired forcedMasterDevice string - Forced Device Type macList string FF:FF:FF:FF:FF:FF Mac list of devices. Mac pattern should be like \"xx:xx:xx:xx:xx\" Forced Master Device slideModule headPlus headPlusPro headOne surfaceOne dollyPlus sliderOnePro sliderOne dollyOne dollyPlusPro jibOne goldFinch slideModuleV3 panPro jibOneMk2 focusPlusPro headPlusV2 headPlusProV2 slideModuleV1 none Return value See default return values . Note The send mac addresses are reachable while creating the bundle. Otherwise, the pairing process will be crashed, in which case get pair state by using this command .","title":"Create Bundle"},{"location":"endpoints/endpoints_http.html#attach-to-exist-bundle","text":"Attach to already existing paired devices. URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"wirelessPairingAttachToBundle\", \"mac\": \"30:AE:A4:8F:B1:46\" } Label Type Value Description command string wirelessPairingAttachToBundle command name mac string FF:FF:FF:FF:FF:FF Which device mac you want to connect. Mac pattern should be like \"xx:xx:xx:xx:xx\" Return value See default return values . Note The send mac addresses are reachable while creating the bundle. Otherwise, the pairing process will be crashed, in which case get pair state by using this command .","title":"Attach to Exist Bundle"},{"location":"endpoints/endpoints_http.html#get-pairing-status","text":"URL /v1/link/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"wirelessPairingStatus\" } Label Type Value Description command string wirelessPairingStatus command name Return value { \"data\": { \"lastPairError\": \"none\", \"wirelessPairState\": \"idle\" }, \"result\": \"ok\" } Label Type Value Description lastPairError string none wifiChannelMismatch impossibleScenario radioFirmwareUpdateRequired deviceFirmwareUpdateRequired unknown deviceSearchProblem alreadyGroupMember connectionProblem Last pair error pairState string idle connecting connectionOk problem","title":"Get Pairing Status"},{"location":"endpoints/endpoints_http.html#disconnect-from-bundle","text":"URL /v1/link/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"disconnect\" } Label Type Value Description command string disconnect command name Return value See default return values .","title":"Disconnect from bundle"},{"location":"endpoints/endpoints_http.html#default-return-values","text":"{ \"result\": \"ok\" } System executed your command without any issues. { \"result\": \"Invalid Arguments\" } Given arguments are invalid.","title":"Default Return Values"},{"location":"endpoints/endpoints_http.html#link","text":"","title":"Link"},{"location":"endpoints/endpoints_http.html#get-link-devices-results","text":"URL /v1/link/{linkID} Method POST Caution The SDK does not supported CORS, so when you send a request with \"OPTIONS\" method, the SDK return a error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"link2PairingScanResults\" } Label Type Value Description command string link2PairingScanResults command name Return value { \"data\": [ { \"firmwareVersionMajor\": 0, \"firmwareVersionMinor\": 18, \"isDeviceFirmwareUpdateAvailable\": false, \"type\": \"slideModuleV3\" }, { \"firmwareVersionMajor\": 0, \"firmwareVersionMinor\": 101, \"isDeviceFirmwareUpdateAvailable\": false, \"type\": \"headPlusV2\" } ], \"result\": \"ok\" } Label Type Value Description data device array [deviceinfo1, deviceinfo2] Array of information of devices on Link Label Type Value Description type string - Device Type firmwareVersionMajor int - Device Firmware Major Version firmwareVersionMinor int - Device fimrware Minor number isDeviceFirmwareUpdateAvailable bool - If there is exist a update available, this flag will be true Device Type slideModule headPlus headPlusPro headOne surfaceOne dollyPlus sliderOnePro sliderOne dollyOne dollyPlusPro jibOne goldFinch slideModuleV3 panPro jibOneMk2 focusPlusPro headPlusV2 headPlusProV2 slideModuleV1 none","title":"Get Link Devices results"},{"location":"endpoints/endpoints_http.html#connect-to-bundle","text":"Pairs devices and joins to them. URL /v1/link/{linkID} Method POST Caution The SDK does not supported CORS, so when you send a request with the \"OPTIONS\" method, the SDK returns an error because of HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"link2PairingConnect\" } Label Type Value Description command string link2PairingConnect command name Return value See default return values .","title":"Connect to Bundle"},{"location":"endpoints/endpoints_http.html#get-pairing-status_1","text":"URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"link2PairingStatus\" } Label Type Value Description command string link2PairingStatus command name Return value { \"data\": { \"canbusPairState\": \"pingReceived\", \"lastPairError\": \"none\" }, \"result\": \"ok\" } Label Type Value Description canbusPairState string idle pingReceived connecting connectionOk Master device state lastPairError string none imposiblleScenario deviceFirmwareUpdateRequired unknown cantAppendDevice","title":"Get Pairing Status"},{"location":"endpoints/endpoints_http.html#disconnect-from-bundle_1","text":"URL /v1/link/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"disconnect\" } Label Type Value Description command string disconnect command name Return value See default return values .","title":"Disconnect from bundle"},{"location":"endpoints/endpoints_http.html#default-return-values_1","text":"{ \"result\": \"ok\" } System executed your command without any issues. { \"result\": \"Invalid Arguments\" } Given arguments are invalid.","title":"Default Return Values"},{"location":"endpoints/endpoints_http.html#rj45","text":"","title":"RJ45"},{"location":"endpoints/endpoints_http.html#connect-to-bundle_1","text":"Pairs devices and joins to them. URL /v1/link/{linkID} Method POST Caution The SDK does not supported CORS, so when you send a request with \"OPTIONS\" method, the SDK return a error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"link1PairingConnect\" } Label Type Value Description command string link1PairingConnect command name Return value See default return values .","title":"Connect to Bundle"},{"location":"endpoints/endpoints_http.html#default-return-values_2","text":"{ \"result\": \"ok\" } System executed your command without any issues. { \"result\": \"Invalid Arguments\" } Given arguments are invalid. { \"result\": \"Device is paired\" } Pairing is complete so no longer send any movement command","title":"Default Return Values"},{"location":"endpoints/endpoints_http.html#keypose","text":"This commands is related to simple pose store and recall methods.","title":"Keypose"},{"location":"endpoints/endpoints_http.html#keypose-store-current-pose","text":"URL /v1/bundle/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"keyposeStoreCurrentPose\", \"index\": 0, } Label Type Value Description command string keyposeStoreCurrentPose command name index integer 0 - 5 Keypose slot you want to store the current pose Return value See default return values . Note Use this command to store your overall pose as a keypose. You can move your system to this location later by referencing with index.","title":"Keypose Store Current Pose"},{"location":"endpoints/endpoints_http.html#keypose-store-by-numeric-data","text":"URL /v1/bundle/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK return a error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"keyposeStoreWithNumericData\", \"index\":0, \"{axis name}\":\"{setpoint value}\" } Label Type Value Description command string keyposeStoreWithNumericData command name index integer 0 - 5 Keypose slot index you want to move axis name float In which axis direction you want to move Axis Name Type Value Range headPan float -180.0 - +180.0 headTilt float -180.0 - +180.0 slide float It depends your calibrations. focus float jibPlusPan float jibPlusTilt float Example JSON You want to send command for three axes; Head Pan, Head Tilt and Slide; { \"command\":\"keyposeStoreWithNumericData\", \"index\":0, \"headPan\":0.0, \"headTilt\":0.0, \"slide\":0.0, } Return value See default return values .","title":"Keypose Store by Numeric Data"},{"location":"endpoints/endpoints_http.html#keypose-move-with-fixed-duration","text":"URL POST /v1/bundle/{linkID} Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"keyposeMoveFixedDuration\", \"index\":0, \"duration\":0.5, \"acceleration\":0.0 } Label Type Value Description command string keyposeMoveFixedDuration command name index integer 0-5 Keypose slot index you want to move acceleration float 0.0 - 1.0 Ease in / out amount. 0.0 is immediate move, 1.0 is most smooth duration float second Planned motion duration Note System doesn't guarantee that every movement will be completed as requested. If requested duration is lower than what system can achieve with 100% speed, system moves with 100% speed.","title":"Keypose Move with Fixed Duration"},{"location":"endpoints/endpoints_http.html#keypose-move-with-fixed-speed","text":"URL POST /v1/bundle/{linkID} Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Method POST Payload { \"command\": \"keyposeMoveFixedSpeed\", \"index\": 0, \"acceleration\": 0.5, \"speed\": 8.0, } Label Type Value Description command string keyposeMoveFixedSpeed command name index integer 0-5 Keypose slot index you want to move acceleration float 0.0 - 1.0 Ease in / out amount. 0.0 is immediate move, 1.0 is most smooth speed float -1.0 - +1.0 Speed ratio for motion Note System doesn't guarantee that every movement will be completed as requested. If requested duration is lower than what system can achieve with 100% speed, system moves with 100% speed.","title":"Keypose Move with Fixed Speed"},{"location":"endpoints/endpoints_http.html#loop-between-keyposes-with-fixed-duration","text":"URL POST /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"keyposeLoopFixedDuration\", \"index1\":0, \"index2\":1, \"duration\":0.0, \"acceleration\":0.0 } Label Type Value Description command string keyposeMoveFixedDuration command name index1 integer 0 - 5 index2 integer 0 - 5 acceleration float 0.0 - 1.0 Ease in / out amount. 0.0 is immediate move, 1.0 is most smooth duration float second Planned motion duration Note System doesn't guarantee that every movement will be completed as requested. If requested duration is lower than what system can achieve with 100% speed, system moves with 100% speed.","title":"Loop Between Keyposes with Fixed Duration"},{"location":"endpoints/endpoints_http.html#loop-between-keyposes-with-fixed-speed","text":"URL POST /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\".. Payload { \"command\": \"keyposeLoopFixedSpeed\", \"index1\": 0, \"index2\": 0, \"acceleration\": 0.5, \"speed\": 8.0, } Label Type Value Description command string keyposeLoopFixedSpeed command name index1 integer 0 - 5 Keypose slot index you want to move acceleartion float 0.0 - 1.0 Ease in / out amount. 0.0 is immediate move, 1.0 is most smooth speed float -1.0 - +1.0 Speed ratio for motion Note System doesn't guarantee to move within you ask for it. If requested duration is lower than what system can achive with %100 speed, system moves with %100 speed.","title":"Loop Between Keyposes with Fixed Speed"},{"location":"endpoints/endpoints_http.html#read-keypose-numeric-information","text":"URL POST /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"keyposeReadNumericValues\", \"index\": 0 } Label Type Value Description command string keyposeReadNumericValues command name index integer 0 - 5 Keypose slot index you want to get information about keypose Return value { \"data\": { \"{axis_name}\": \"{set_point}\", }, \"result\": \"ok\" } Example Return { \"data\": { \"focus\": 0, \"headPan\": 0.0, \"headTilt\": 0.0, \"index\": 0, \"jibPlusPan\": -1.0, \"jibPlusTilt\": -1.0, \"slide\": 0.0 }, \"result\": \"ok\" } Label Type Value Description data string none running error multipleDevice noDevice finished Update status Axis Name Type Value Range headPan float -180.0 - +180.0 headTilt float -180.0 - +180.0 slide float It depends your calibrations. focus float jibPlusPan float jibPlusTilt float","title":"Read Keypose Numeric Information"},{"location":"endpoints/endpoints_http.html#delete-keypose","text":"TO BE FILLED URL POST /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"keyposeDeletePose\", \"index\":1 } Label Type Value Description command string keyposeDeletePose command name index integer 0 - 5 Keypose slot index you want to get information about keypose","title":"Delete Keypose"},{"location":"endpoints/endpoints_http.html#default-return-values_3","text":"{ \"result\": \"ok\" } Given arguments are invalid. { \"result\": \"invalid setup\" } Given device is invalid","title":"Default Return Values"},{"location":"endpoints/endpoints_http.html#move","text":"This command relates to move methods.","title":"Move"},{"location":"endpoints/endpoints_http.html#joystick-move","text":"URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"joystickMove\", \"{axis_name}\": \"{speed_ratio}\" } Label Type Value Description command string joystickMove command name axis_name float - In which axis direction you want to move and its speed ratio. Axis Name Type Value Range headPan float -180.0 - +180.0 headTilt float -180.0 - +180.0 slide float It depends your calibrations. focus float jibPlusPan float jibPlusTilt float Note As in the example below, the desired direction to move must be given as the key and the speed value as a value. Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Example JSON You want to send command for three axes; Head Pan, Head Tilt and Slide; { \"command\":\"joystickMove\", \"index\":0, \"headPan\":0.0, \"headTilt\":0.0, \"slide\":0.0, }","title":"Joystick Move"},{"location":"endpoints/endpoints_http.html#focus-manual-move","text":"URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"focusManualMove\", \"deltaEnc\": 10 } Label Type Value Description command string focusManualMove command name deltaEnc integer `` encoder step","title":"Focus Manual Move"},{"location":"endpoints/endpoints_http.html#motion-abort","text":"URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"motionAbort\" } Label Type Value Description command string motionAbort command name","title":"Motion Abort"},{"location":"endpoints/endpoints_http.html#calibration","text":"URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"calibrate\", \"device\": \"slideModuleV3\", \"isOnGround\": true, \"isOnLeftSide\" : false, \"jibLength\" = 2, \"rodLength\" = 3 } |Label| Type | Value |Description| |:--- |:---- |:-----------| | command | string | motionAbort |calibrate name| | device | string | Each device has own configuratation | Which axis you want to calibrate it.| | jibLength | float | | length of jib| | rodLength | float | | length of camera rod of jib| | isOnGround | bool | | If slider is on tripod, it should be true| | isOnLeftSide | bool | | If slide module is left side of slider, it should be true otherwise it will be false | `slideModule` `headPlus` `headPlusPro` `headOne` `surfaceOne` `dollyPlus` `sliderOnePro` `sliderOne` `dollyOne` `dollyPlusPro` `jibOne` `goldFinch` `slideModuleV3` `panPro` `jibOneMk2` `focusPlusPro` `headPlusV2` `headPlusProV2` `slideModuleV1` `none` Device Type Need Parameter slideModule isOnGround isOnLeftSide headPlus - headPlusPro - headOne - surfaceOne - dollyPlus - sliderOnePro isOnGround isOnLeftSide sliderOne isOnGround isOnLeftSide dollyOne - dollyPlusPro - jibOne jibLength rodLength goldFinch - slideModuleV3 isOnGround isOnLeftSide panPro - jibOneMk2 - focusPlusPro - headPlusV2 - headPlusProV2 - slideModuleV1 - none - Example JSON You may want to send command for three axes; Head Pan, Head Tilt and Slide; { \"command\": \"calibrate\", \"device\": \"slideModuleV3\", \"isOnGround\": true, \"isOnLeftSide\" : false }","title":"Calibration"},{"location":"endpoints/endpoints_http.html#numeric-limits","text":"Each axis has specific limit value and step value, this command returns these. URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"numericLimitValues\" } Label Type Value Description command string numericLimitValues command name Return value { \"pan_maxLimit\": 36000.0, \"pan_minLimit\": -36000.0, \"pan_step\": 0.0006099999882280827, \"result\": \"ok\", \"tilt_maxLimit\": 89.0999984741211, \"tilt_minLimit\": -89.0999984741211, \"tilt_step\": 0.0006099999882280827 } Label Type Value Description panMaxLimit float list panMinLimit float panStep float tiltMaxLimit float tiltMinLimit float tiltStep float focusMaxLimit float focusMinLimit float focusStep float jibPanMaxLimit float jibPanMinLimit float jibPanStep float jibTiltMaxLimit float jibTiltMinLimit float jibPanStep float isDataReady bool","title":"Numeric Limits"},{"location":"endpoints/endpoints_http.html#default-return-values_4","text":"{ \"result\": \"ok\" } System executed your command without any issues. { \"result\": \"invalid setup\" } Given device is invalid","title":"Default Return Values"},{"location":"endpoints/endpoints_http.html#status","text":"This command relates to move methods. URL /bundle/{linkID}/status Method GET Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Return value { \"data\": { \"calibratedAxes\": [ { \"axis\": \"headPan\", \"device\": \"headPlusV2\" }, { \"axis\": \"headTilt\", \"device\": \"headPlusV2\" } ], \"deviceInfo\": [ { \"batteryLevel\": 1.0, \"deviceFirmwareVersion\": 101, \"type\": \"headPlusV2\" } ], \"deviceInfoEverythingReady\": true, \"keyposeLoopActive\": false, \"keyposeMotionAimIndex\": 0, \"keyposeMotionStartIndex\": 0, \"keyposeSlotsFilled\": [ false, false, false, false, false, false ], \"plannedMotionProgress\": 1.0, \"plannedMotionSecs\": 0.0, \"readings\": { \"headPan\": 89.95600128173828, \"headTilt\": 0.0 }, \"realTimeSupportedAxes\": [], \"state\": \"idle\", \"supportedAxes\": [ { \"axis\": \"headPan\", \"device\": \"headPlusV2\" }, { \"axis\": \"headTilt\", \"device\": \"headPlusV2\" } ], \"timestampDevice\": 303462, \"timestampEpoch\": 1634645133077 }, \"result\": \"ok\" } Label Type Value Description calibratedAxes string array Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt Calibrated axes as string array deviceInfo device info array Each elements describes in below table Array of information of devices deviceInfoEverythingReady bool true - false It means that when it is true, that can get information. Otherwise, you can not get information. keyposeLoopActive bool true - false It means that if it is true, your bundle is looping between the specified keypose indexes. keyposeMotionAimIndex int 0 - 5 aim index for keypose motion. keyposeMotionStartIndex int 0 - 5 Index that before start keypose motion. keyposeSlotsFilled bool array true - false Array has six elements, each element represents that whether index is filled. plannedMotionProgress float 0.0 - 1.0 It shows the percentage of how many complete of keypose motion. It is mapped between 0.0 - 1.0. plannedMotionSecs float How many seconds the keypose motion will take readings key-value pair array Each elements describes in below table Array of information of each axis realTimeSupportedAxes string array Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt Which axes the bundle has are supported in Real-Time Move. state string Idle Keypose_Move RealTime_Move Focus_Calibration Slider_Calibration Joystick_Move Unsupported_Activity Shows state of the bundle movement. timestampDevice long int The status was generated at this timestamp on the master device. timestampEpoch long int The status was grabbed from the SDK at this timestamp. Label Type Value Description deviceFirmwareVersion int Device fimrware version batteryLevel int 0 - 100 Battery level type string - Device Type Device Type slideModule headPlus headPlusPro headOne surfaceOne dollyPlus sliderOnePro sliderOne dollyOne dollyPlusPro jibOne goldFinch slideModuleV3 panPro jibOneMk2 focusPlusPro headPlusV2 headPlusProV2 slideModuleV1 none Label Type Value Description readings It may consist of one or more of the following: Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt float Head_Pan: -180 - 180 Head_Tilt: -180 - 180 Slide: Focus: Jib_Pan: Jib_Tilt: In which axis direction you want to move and its speed ratio. Note You need to ask for this manually at regular intervals. Each request will return a status data without waiting for the contents to be updated. If you want to differentiate whether status is changed or not, you can use the TimestampEpoch field value.","title":"Status"},{"location":"endpoints/endpoints_http.html#other","text":"Details ...","title":"Other"},{"location":"endpoints/endpoints_ws.html","text":"Websocket Endpoints Realtime move commands require you to use websocket based Read latest device status Websocket URL ws://localhost/bundle/{linkID}/status Payload Send empty packet to socket to receive another response Return value { \"data\": { \"CalibratedAxes\": [], \"DeviceInfo\": [ { \"BatteryLevel\": 0.36000001430511475, \"DeviceFirmwareVersion\": 100, \"Type\": \"HeadPlus\" }, { \"BatteryLevel\": 0.1599999964237213, \"DeviceFirmwareVersion\": 16, \"Type\": \"SlideModuleV3\" } ], \"DeviceInfoEverythingReady\": true, \"KeyposeLoopActive\": false, \"KeyposeMotion_AimIndex\": 0, \"KeyposeMotion_StartIndex\": 0, \"KeyposeSlotsFilled\": [ false, false, false, false, false, false ], \"PlannedMotionProgress\": 1.0, \"PlannedMotion_secs\": 0.0, \"Readings\": { \"Head_Pan\": 89.97799682617188, \"Head_Tilt\": 0.020999999716877937, \"Slide\": 0.0 }, \"RealTimeSupportedAxes\": [ \"Head_Pan\", \"Head_Tilt\" ], \"State\": \"Joystick_Move\", \"SupportedAxes\": [ \"Head_Pan\", \"Head_Tilt\", \"Slide\" ], \"TimestampDevice\": 1895025, \"TimestampEpoch\": 1625829832038 }, \"result\": \"ok\" } Label Type Value Description CalibratedAxes string array Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt Calibrated axes as string array DeviceInfo device info array Each elements described in the table below Array of information of devices DeviceInfoEverythingReady bool true - false This means that when it is true, that can get information. Otherwise, you can not get information. KeyposeLoopActive bool true - false This means that if it is true, your bundle is looping between the specified keypose indexes. KeyposeMotion_AimIndex int 0 - 5 aim index for keypose motion. KeyposeMotion_StartIndex int 0 - 5 Index that before start keypose motion. KeyposeSlotsFilled bool array true - false Array has six elements, each element represents whether index is filled. PlannedMotionProgress float 0.0 - 1.0 It shows the percentage of how many complete of keypose motion. It is mapped between 0.0 - 1.0. PlannedMotion_secs float How many seconds the keypose motion will take readings key-value pair array Each elements describes in below table Array of information of each axis RealTimeSupportedAxes string array Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt Which axes the bundle has are supported in Real-Time Move. State string Idle Keypose_Move RealTime_Move Focus_Calibration Slider_Calibration Joystick_Move Unsupported_Activity Shows state of the bundle movement. RealTimeSupportedAxes string array Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt Which axes the bundle has are supported. TimestampDevice long int The status was generated at this timestamp on the master device. TimestampEpoch long int The status was grabbed from the SDK at this timestamp. Label Type Value Description DeviceFirmwareVersion int Device fimrware version BatteryLevel int 0 - 100 Battery level Type string EdlDevice_SlideModule EdlDevice_HeadPlus EdlDevice_HeadPlusPro EdlDevice_HeadOne EdlDevice_SurfaceOne EdlDevice_DollyPlus EdlDevice_SliderOnePro EdlDevice_SliderOne EdlDevice_DollyOne EdlDevice_DollyPlusPro EdlDevice_JibOne EdlDevice_GoldFinch EdlDevice_SlideModuleV3 EdlDevice_PanPro EdlDevice_JibOne_Mk2 EdlDevice_FocusPlusPro EdlDevice_HeadPlusV2 EdlDevice_HeadPlusProV2 EdlDevice_SlideModuleV1 EdlDevice_None Device Type Label Type Value Description readings It may consist of one or more of the following: Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt float Head_Pan: -180 - 180 Head_Tilt: -180 - 180 Slide: Focus: Jib_Pan: Jib_Tilt: In which axis direction you want to move and its speed ratio. Note You need to ask for this manually at periodic intervals. Each request will return a status data without waiting for contents to be updated. If you want to differentiate whether status has changed or not, you can use the TimestampEpoch field value. Real Time Move URL POST /v1/bundle/{linkID} Payload { \"command\": \"realTimeMoveFixedDuration\", \"duration_sec\": 0.001, \"{axis_name}\": \"{setpoint_value}\" } Label Type Value Description command string realTimeMoveFixedDuration command name duration_sec integer Planned motion duration axis_name can be one of below: Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt float Head_Pan: -180.0 - 180.0 Head_Tilt: -180.0 - 180.0 Slide: - Focus: - Jib_Pan: - Jib_Tilt: - In which axis direction you want to move and its axis point. Example JSON You want to send command for three axes; Head Pan, Head Tilt and Slide; { \"command\":\"keyposeStoreWithNumericData\", \"index\":0, \"head_pan\":0.0, \"head_tilt\":0.0, \"slide\":0.0, } Return value See default return values . Default Return Values { \"result\": \"OK\" } System executed your command without any issues. { \"result\": \"Invalid Arguments\" } Given arguments are invalid.","title":"Websockets"},{"location":"endpoints/endpoints_ws.html#websocket-endpoints","text":"Realtime move commands require you to use websocket based","title":"Websocket Endpoints"},{"location":"endpoints/endpoints_ws.html#read-latest-device-status","text":"Websocket URL ws://localhost/bundle/{linkID}/status Payload Send empty packet to socket to receive another response Return value { \"data\": { \"CalibratedAxes\": [], \"DeviceInfo\": [ { \"BatteryLevel\": 0.36000001430511475, \"DeviceFirmwareVersion\": 100, \"Type\": \"HeadPlus\" }, { \"BatteryLevel\": 0.1599999964237213, \"DeviceFirmwareVersion\": 16, \"Type\": \"SlideModuleV3\" } ], \"DeviceInfoEverythingReady\": true, \"KeyposeLoopActive\": false, \"KeyposeMotion_AimIndex\": 0, \"KeyposeMotion_StartIndex\": 0, \"KeyposeSlotsFilled\": [ false, false, false, false, false, false ], \"PlannedMotionProgress\": 1.0, \"PlannedMotion_secs\": 0.0, \"Readings\": { \"Head_Pan\": 89.97799682617188, \"Head_Tilt\": 0.020999999716877937, \"Slide\": 0.0 }, \"RealTimeSupportedAxes\": [ \"Head_Pan\", \"Head_Tilt\" ], \"State\": \"Joystick_Move\", \"SupportedAxes\": [ \"Head_Pan\", \"Head_Tilt\", \"Slide\" ], \"TimestampDevice\": 1895025, \"TimestampEpoch\": 1625829832038 }, \"result\": \"ok\" } Label Type Value Description CalibratedAxes string array Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt Calibrated axes as string array DeviceInfo device info array Each elements described in the table below Array of information of devices DeviceInfoEverythingReady bool true - false This means that when it is true, that can get information. Otherwise, you can not get information. KeyposeLoopActive bool true - false This means that if it is true, your bundle is looping between the specified keypose indexes. KeyposeMotion_AimIndex int 0 - 5 aim index for keypose motion. KeyposeMotion_StartIndex int 0 - 5 Index that before start keypose motion. KeyposeSlotsFilled bool array true - false Array has six elements, each element represents whether index is filled. PlannedMotionProgress float 0.0 - 1.0 It shows the percentage of how many complete of keypose motion. It is mapped between 0.0 - 1.0. PlannedMotion_secs float How many seconds the keypose motion will take readings key-value pair array Each elements describes in below table Array of information of each axis RealTimeSupportedAxes string array Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt Which axes the bundle has are supported in Real-Time Move. State string Idle Keypose_Move RealTime_Move Focus_Calibration Slider_Calibration Joystick_Move Unsupported_Activity Shows state of the bundle movement. RealTimeSupportedAxes string array Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt Which axes the bundle has are supported. TimestampDevice long int The status was generated at this timestamp on the master device. TimestampEpoch long int The status was grabbed from the SDK at this timestamp. Label Type Value Description DeviceFirmwareVersion int Device fimrware version BatteryLevel int 0 - 100 Battery level Type string EdlDevice_SlideModule EdlDevice_HeadPlus EdlDevice_HeadPlusPro EdlDevice_HeadOne EdlDevice_SurfaceOne EdlDevice_DollyPlus EdlDevice_SliderOnePro EdlDevice_SliderOne EdlDevice_DollyOne EdlDevice_DollyPlusPro EdlDevice_JibOne EdlDevice_GoldFinch EdlDevice_SlideModuleV3 EdlDevice_PanPro EdlDevice_JibOne_Mk2 EdlDevice_FocusPlusPro EdlDevice_HeadPlusV2 EdlDevice_HeadPlusProV2 EdlDevice_SlideModuleV1 EdlDevice_None Device Type Label Type Value Description readings It may consist of one or more of the following: Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt float Head_Pan: -180 - 180 Head_Tilt: -180 - 180 Slide: Focus: Jib_Pan: Jib_Tilt: In which axis direction you want to move and its speed ratio. Note You need to ask for this manually at periodic intervals. Each request will return a status data without waiting for contents to be updated. If you want to differentiate whether status has changed or not, you can use the TimestampEpoch field value.","title":"Read latest device status"},{"location":"endpoints/endpoints_ws.html#real-time-move","text":"URL POST /v1/bundle/{linkID} Payload { \"command\": \"realTimeMoveFixedDuration\", \"duration_sec\": 0.001, \"{axis_name}\": \"{setpoint_value}\" } Label Type Value Description command string realTimeMoveFixedDuration command name duration_sec integer Planned motion duration axis_name can be one of below: Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt float Head_Pan: -180.0 - 180.0 Head_Tilt: -180.0 - 180.0 Slide: - Focus: - Jib_Pan: - Jib_Tilt: - In which axis direction you want to move and its axis point. Example JSON You want to send command for three axes; Head Pan, Head Tilt and Slide; { \"command\":\"keyposeStoreWithNumericData\", \"index\":0, \"head_pan\":0.0, \"head_tilt\":0.0, \"slide\":0.0, } Return value See default return values .","title":"Real Time Move"},{"location":"endpoints/endpoints_ws.html#default-return-values","text":"{ \"result\": \"OK\" } System executed your command without any issues. { \"result\": \"Invalid Arguments\" } Given arguments are invalid.","title":"Default Return Values"},{"location":"endpoints/commands/device/device.html","text":"Get Link Module List And Status This command returns the status of link modules. Connection time if link modules are no longer plugged into the PC URL /v1/device Method POST Payload { \"command\": \"linkStatus\" } Caution The SDK does not supported CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because of HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Label| Type | Value | Description :--- |:---- |:----------- command | string | linkStatus | command name Return value { \"data\": [ { \"initialFoundEpoch\": \"1634625480462967400\", \"isDeviceFirmwareUpdateAvailable\": false, \"isDeviceFirmwareUpdateRequired\": false, \"isFirmwareCorrupted\": false, \"isPairingDone\": false, \"isRadioFirmwareUpdateAvailable\": false, \"isRadioFirmwareUpdateRequired\": false, \"isValid\": true, \"linkConnectionType\": \"none\", \"linkID\": \"206034415530\", \"linkType\": \"linkAdapter\", \"portName\": \"COM7\" } ], \"result\": \"ok\" } Label Type Value Description data device list [deviceinfo1, deviceinfo2] List of identified link modules Label Type Value Description initialFoundEpoch string - Epoch time that the link module was first defined isRadioFirmwareUpdateAvailable bool If there is an available update for Link Radio device. isRadioFirmwareUpdateRequired bool If there is a required update for Link Radio device. isDeviceFirmwareUpdateRequired bool If there is a required update for Link device. isDeviceFirmwareUpdateAvailable bool If there is an available update for Link device. isPairingDone bool true - false The value is true when pairing is done, otherwise false. isValid bool true - false Returns true as long as the module is connected to the computer. Otherwise returns false. linkConnectionType string wireless canbus rj45 none List of identified link modules linkID string For Stop Motion Module: 24 character length For Link Adapter: 12 character length List of identified link modules linkType string stopMotionModule linkAdapter Indicates the type of module portName string For Windows: COM* - For Linux: ttyUSB* USB port name, it varies according to OS. Note Link ID vary between link modules. For example; the Stop Motion Module has 24 character length Link ID But Link Adapter has a 12 character length Link Device Firmware Update When Link device update is available or required. You can update this command. URL /v1/device Method POST Caution The SDK does not supported CORS, so when you send a request with the \"OPTIONS\" method, the SDK returns an error because of HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"startLinkDeviceFirmwareUpdate\" } Label Type Description command string startLinkDeviceFirmwareUpdate Return value See default return values . Get Link Device Firmware Update Status When update is started, it can be following with this command. URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"linkDeviceFirmwareUpdateStatus\" } Label Type Value Description command string linkDeviceFirmwareUpdateStatus command name Return value { \"status\": \"noDevice\", \"result\": \"ok\" } Label Type Value Description NoDevice string none running error multipleDevice noDevice finished Update status Link Radio Firmware Update When Link radio update is available or required. It can be updated with this command. URL /v1/device Method POST Caution The SDK does not supported CORS, so when you send a request with the \"OPTIONS\" method, the SDK returns an error because of HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"startLinkRadioFirmwareUpdate\" } Label Type Description command string startLinkRadioFirmwareUpdate Return value See default return values . Get Link Radio Firmware Update Status When update is started, it can be following with this command. URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"linkRadioFirmwarUpdateStatus\" } Label Type Value Description command string linkRadioFirmwarUpdateStatus command name Return value { \"status\": \"none\", \"result\": \"ok\" } Label Type Value Description NoDevice string none running error finished Update status Default Return Values { \"result\": \"ok\" } System executed your command without any issues. { \"result\": \"Invalid Arguments\" } Given arguments are invalid. { \"result\": \"Not found Any Device\" }","title":"Device"},{"location":"endpoints/commands/device/device.html#get-link-module-list-and-status","text":"This command returns the status of link modules. Connection time if link modules are no longer plugged into the PC URL /v1/device Method POST Payload { \"command\": \"linkStatus\" } Caution The SDK does not supported CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because of HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Label| Type | Value | Description :--- |:---- |:----------- command | string | linkStatus | command name Return value { \"data\": [ { \"initialFoundEpoch\": \"1634625480462967400\", \"isDeviceFirmwareUpdateAvailable\": false, \"isDeviceFirmwareUpdateRequired\": false, \"isFirmwareCorrupted\": false, \"isPairingDone\": false, \"isRadioFirmwareUpdateAvailable\": false, \"isRadioFirmwareUpdateRequired\": false, \"isValid\": true, \"linkConnectionType\": \"none\", \"linkID\": \"206034415530\", \"linkType\": \"linkAdapter\", \"portName\": \"COM7\" } ], \"result\": \"ok\" } Label Type Value Description data device list [deviceinfo1, deviceinfo2] List of identified link modules Label Type Value Description initialFoundEpoch string - Epoch time that the link module was first defined isRadioFirmwareUpdateAvailable bool If there is an available update for Link Radio device. isRadioFirmwareUpdateRequired bool If there is a required update for Link Radio device. isDeviceFirmwareUpdateRequired bool If there is a required update for Link device. isDeviceFirmwareUpdateAvailable bool If there is an available update for Link device. isPairingDone bool true - false The value is true when pairing is done, otherwise false. isValid bool true - false Returns true as long as the module is connected to the computer. Otherwise returns false. linkConnectionType string wireless canbus rj45 none List of identified link modules linkID string For Stop Motion Module: 24 character length For Link Adapter: 12 character length List of identified link modules linkType string stopMotionModule linkAdapter Indicates the type of module portName string For Windows: COM* - For Linux: ttyUSB* USB port name, it varies according to OS. Note Link ID vary between link modules. For example; the Stop Motion Module has 24 character length Link ID But Link Adapter has a 12 character length","title":"Get Link Module List And Status"},{"location":"endpoints/commands/device/device.html#link-device-firmware-update","text":"When Link device update is available or required. You can update this command. URL /v1/device Method POST Caution The SDK does not supported CORS, so when you send a request with the \"OPTIONS\" method, the SDK returns an error because of HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"startLinkDeviceFirmwareUpdate\" } Label Type Description command string startLinkDeviceFirmwareUpdate Return value See default return values .","title":"Link Device Firmware Update"},{"location":"endpoints/commands/device/device.html#get-link-device-firmware-update-status","text":"When update is started, it can be following with this command. URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"linkDeviceFirmwareUpdateStatus\" } Label Type Value Description command string linkDeviceFirmwareUpdateStatus command name Return value { \"status\": \"noDevice\", \"result\": \"ok\" } Label Type Value Description NoDevice string none running error multipleDevice noDevice finished Update status","title":"Get Link Device Firmware Update Status"},{"location":"endpoints/commands/device/device.html#link-radio-firmware-update","text":"When Link radio update is available or required. It can be updated with this command. URL /v1/device Method POST Caution The SDK does not supported CORS, so when you send a request with the \"OPTIONS\" method, the SDK returns an error because of HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"startLinkRadioFirmwareUpdate\" } Label Type Description command string startLinkRadioFirmwareUpdate Return value See default return values .","title":"Link Radio Firmware Update"},{"location":"endpoints/commands/device/device.html#get-link-radio-firmware-update-status","text":"When update is started, it can be following with this command. URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"linkRadioFirmwarUpdateStatus\" } Label Type Value Description command string linkRadioFirmwarUpdateStatus command name Return value { \"status\": \"none\", \"result\": \"ok\" } Label Type Value Description NoDevice string none running error finished Update status","title":"Get Link Radio Firmware Update Status"},{"location":"endpoints/commands/device/device.html#default-return-values","text":"{ \"result\": \"ok\" } System executed your command without any issues. { \"result\": \"Invalid Arguments\" } Given arguments are invalid. { \"result\": \"Not found Any Device\" }","title":"Default Return Values"},{"location":"endpoints/commands/keypose/keypose.html","text":"Keypose Store Current Pose URL /v1/bundle/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"keyposeStoreCurrentPose\", \"index\": 0, } Label Type Value Description command string keyposeStoreCurrentPose command name index integer 0 - 5 Keypose slot you want to store the current pose Return value See default return values . Note Use this command to store your overall pose as a keypose. You can move your system to this location later by referencing with index. Keypose Store by Numeric Data URL /v1/bundle/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK return a error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"keyposeStoreWithNumericData\", \"index\":0, \"{axis name}\":\"{setpoint value}\" } Label Type Value Description command string keyposeStoreWithNumericData command name index integer 0 - 5 Keypose slot index you want to move axis name float In which axis direction you want to move Axis Name Type Value Range headPan float -180.0 - +180.0 headTilt float -180.0 - +180.0 slide float It depends your calibrations. focus float jibPlusPan float jibPlusTilt float Example JSON You want to send command for three axes; Head Pan, Head Tilt and Slide; { \"command\":\"keyposeStoreWithNumericData\", \"index\":0, \"headPan\":0.0, \"headTilt\":0.0, \"slide\":0.0, } Return value See default return values . Keypose Move with Fixed Duration URL POST /v1/bundle/{linkID} Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"keyposeMoveFixedDuration\", \"index\":0, \"duration\":0.5, \"acceleration\":0.0 } Label Type Value Description command string keyposeMoveFixedDuration command name index integer 0-5 Keypose slot index you want to move acceleration float 0.0 - 1.0 Ease in / out amount. 0.0 is immediate move, 1.0 is most smooth duration float second Planned motion duration Note System doesn't guarantee that every movement will be completed as requested. If requested duration is lower than what system can achieve with 100% speed, system moves with 100% speed. Keypose Move with Fixed Speed URL POST /v1/bundle/{linkID} Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Method POST Payload { \"command\": \"keyposeMoveFixedSpeed\", \"index\": 0, \"acceleration\": 0.5, \"speed\": 8.0, } Label Type Value Description command string keyposeMoveFixedSpeed command name index integer 0-5 Keypose slot index you want to move acceleration float 0.0 - 1.0 Ease in / out amount. 0.0 is immediate move, 1.0 is most smooth speed float -1.0 - +1.0 Speed ratio for motion Note System doesn't guarantee that every movement will be completed as requested. If requested duration is lower than what system can achieve with 100% speed, system moves with 100% speed. Loop Between Keyposes with Fixed Duration URL POST /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"keyposeLoopFixedDuration\", \"index1\":0, \"index2\":1, \"duration\":0.0, \"acceleration\":0.0 } Label Type Value Description command string keyposeMoveFixedDuration command name index1 integer 0 - 5 index2 integer 0 - 5 acceleration float 0.0 - 1.0 Ease in / out amount. 0.0 is immediate move, 1.0 is most smooth duration float second Planned motion duration Note System doesn't guarantee that every movement will be completed as requested. If requested duration is lower than what system can achieve with 100% speed, system moves with 100% speed. Loop Between Keyposes with Fixed Speed URL POST /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\".. Payload { \"command\": \"keyposeLoopFixedSpeed\", \"index1\": 0, \"index2\": 0, \"acceleration\": 0.5, \"speed\": 8.0, } Label Type Value Description command string keyposeLoopFixedSpeed command name index1 integer 0 - 5 Keypose slot index you want to move acceleartion float 0.0 - 1.0 Ease in / out amount. 0.0 is immediate move, 1.0 is most smooth speed float -1.0 - +1.0 Speed ratio for motion Note System doesn't guarantee to move within you ask for it. If requested duration is lower than what system can achive with %100 speed, system moves with %100 speed. Read Keypose Numeric Information URL POST /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"keyposeReadNumericValues\", \"index\": 0 } Label Type Value Description command string keyposeReadNumericValues command name index integer 0 - 5 Keypose slot index you want to get information about keypose Return value { \"data\": { \"{axis_name}\": \"{set_point}\", }, \"result\": \"ok\" } Example Return { \"data\": { \"focus\": 0, \"headPan\": 0.0, \"headTilt\": 0.0, \"index\": 0, \"jibPlusPan\": -1.0, \"jibPlusTilt\": -1.0, \"slide\": 0.0 }, \"result\": \"ok\" } Label Type Value Description data string none running error multipleDevice noDevice finished Update status Axis Name Type Value Range headPan float -180.0 - +180.0 headTilt float -180.0 - +180.0 slide float It depends your calibrations. focus float jibPlusPan float jibPlusTilt float Delete Keypose TO BE FILLED URL POST /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"keyposeDeletePose\", \"index\":1 } Label Type Value Description command string keyposeDeletePose command name index integer 0 - 5 Keypose slot index you want to get information about keypose Default Return Values { \"result\": \"ok\" } Given arguments are invalid. { \"result\": \"invalid setup\" } Given device is invalid","title":"Keypose"},{"location":"endpoints/commands/keypose/keypose.html#keypose-store-current-pose","text":"URL /v1/bundle/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"keyposeStoreCurrentPose\", \"index\": 0, } Label Type Value Description command string keyposeStoreCurrentPose command name index integer 0 - 5 Keypose slot you want to store the current pose Return value See default return values . Note Use this command to store your overall pose as a keypose. You can move your system to this location later by referencing with index.","title":"Keypose Store Current Pose"},{"location":"endpoints/commands/keypose/keypose.html#keypose-store-by-numeric-data","text":"URL /v1/bundle/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK return a error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"keyposeStoreWithNumericData\", \"index\":0, \"{axis name}\":\"{setpoint value}\" } Label Type Value Description command string keyposeStoreWithNumericData command name index integer 0 - 5 Keypose slot index you want to move axis name float In which axis direction you want to move Axis Name Type Value Range headPan float -180.0 - +180.0 headTilt float -180.0 - +180.0 slide float It depends your calibrations. focus float jibPlusPan float jibPlusTilt float Example JSON You want to send command for three axes; Head Pan, Head Tilt and Slide; { \"command\":\"keyposeStoreWithNumericData\", \"index\":0, \"headPan\":0.0, \"headTilt\":0.0, \"slide\":0.0, } Return value See default return values .","title":"Keypose Store by Numeric Data"},{"location":"endpoints/commands/keypose/keypose.html#keypose-move-with-fixed-duration","text":"URL POST /v1/bundle/{linkID} Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"keyposeMoveFixedDuration\", \"index\":0, \"duration\":0.5, \"acceleration\":0.0 } Label Type Value Description command string keyposeMoveFixedDuration command name index integer 0-5 Keypose slot index you want to move acceleration float 0.0 - 1.0 Ease in / out amount. 0.0 is immediate move, 1.0 is most smooth duration float second Planned motion duration Note System doesn't guarantee that every movement will be completed as requested. If requested duration is lower than what system can achieve with 100% speed, system moves with 100% speed.","title":"Keypose Move with Fixed Duration"},{"location":"endpoints/commands/keypose/keypose.html#keypose-move-with-fixed-speed","text":"URL POST /v1/bundle/{linkID} Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Method POST Payload { \"command\": \"keyposeMoveFixedSpeed\", \"index\": 0, \"acceleration\": 0.5, \"speed\": 8.0, } Label Type Value Description command string keyposeMoveFixedSpeed command name index integer 0-5 Keypose slot index you want to move acceleration float 0.0 - 1.0 Ease in / out amount. 0.0 is immediate move, 1.0 is most smooth speed float -1.0 - +1.0 Speed ratio for motion Note System doesn't guarantee that every movement will be completed as requested. If requested duration is lower than what system can achieve with 100% speed, system moves with 100% speed.","title":"Keypose Move with Fixed Speed"},{"location":"endpoints/commands/keypose/keypose.html#loop-between-keyposes-with-fixed-duration","text":"URL POST /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"keyposeLoopFixedDuration\", \"index1\":0, \"index2\":1, \"duration\":0.0, \"acceleration\":0.0 } Label Type Value Description command string keyposeMoveFixedDuration command name index1 integer 0 - 5 index2 integer 0 - 5 acceleration float 0.0 - 1.0 Ease in / out amount. 0.0 is immediate move, 1.0 is most smooth duration float second Planned motion duration Note System doesn't guarantee that every movement will be completed as requested. If requested duration is lower than what system can achieve with 100% speed, system moves with 100% speed.","title":"Loop Between Keyposes with Fixed Duration"},{"location":"endpoints/commands/keypose/keypose.html#loop-between-keyposes-with-fixed-speed","text":"URL POST /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\".. Payload { \"command\": \"keyposeLoopFixedSpeed\", \"index1\": 0, \"index2\": 0, \"acceleration\": 0.5, \"speed\": 8.0, } Label Type Value Description command string keyposeLoopFixedSpeed command name index1 integer 0 - 5 Keypose slot index you want to move acceleartion float 0.0 - 1.0 Ease in / out amount. 0.0 is immediate move, 1.0 is most smooth speed float -1.0 - +1.0 Speed ratio for motion Note System doesn't guarantee to move within you ask for it. If requested duration is lower than what system can achive with %100 speed, system moves with %100 speed.","title":"Loop Between Keyposes with Fixed Speed"},{"location":"endpoints/commands/keypose/keypose.html#read-keypose-numeric-information","text":"URL POST /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"keyposeReadNumericValues\", \"index\": 0 } Label Type Value Description command string keyposeReadNumericValues command name index integer 0 - 5 Keypose slot index you want to get information about keypose Return value { \"data\": { \"{axis_name}\": \"{set_point}\", }, \"result\": \"ok\" } Example Return { \"data\": { \"focus\": 0, \"headPan\": 0.0, \"headTilt\": 0.0, \"index\": 0, \"jibPlusPan\": -1.0, \"jibPlusTilt\": -1.0, \"slide\": 0.0 }, \"result\": \"ok\" } Label Type Value Description data string none running error multipleDevice noDevice finished Update status Axis Name Type Value Range headPan float -180.0 - +180.0 headTilt float -180.0 - +180.0 slide float It depends your calibrations. focus float jibPlusPan float jibPlusTilt float","title":"Read Keypose Numeric Information"},{"location":"endpoints/commands/keypose/keypose.html#delete-keypose","text":"TO BE FILLED URL POST /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"keyposeDeletePose\", \"index\":1 } Label Type Value Description command string keyposeDeletePose command name index integer 0 - 5 Keypose slot index you want to get information about keypose","title":"Delete Keypose"},{"location":"endpoints/commands/keypose/keypose.html#default-return-values","text":"{ \"result\": \"ok\" } Given arguments are invalid. { \"result\": \"invalid setup\" } Given device is invalid","title":"Default Return Values"},{"location":"endpoints/commands/link_module/link_can_commands.html","text":"Get Link Devices results URL /v1/link/{linkID} Method POST Caution The SDK does not supported CORS, so when you send a request with \"OPTIONS\" method, the SDK return a error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"link2PairingScanResults\" } Label Type Value Description command string link2PairingScanResults command name Return value { \"data\": [ { \"firmwareVersionMajor\": 0, \"firmwareVersionMinor\": 18, \"isDeviceFirmwareUpdateAvailable\": false, \"type\": \"slideModuleV3\" }, { \"firmwareVersionMajor\": 0, \"firmwareVersionMinor\": 101, \"isDeviceFirmwareUpdateAvailable\": false, \"type\": \"headPlusV2\" } ], \"result\": \"ok\" } Label Type Value Description data device array [deviceinfo1, deviceinfo2] Array of information of devices on Link Label Type Value Description type string - Device Type firmwareVersionMajor int - Device Firmware Major Version firmwareVersionMinor int - Device fimrware Minor number isDeviceFirmwareUpdateAvailable bool - If there is exist a update available, this flag will be true Device Type slideModule headPlus headPlusPro headOne surfaceOne dollyPlus sliderOnePro sliderOne dollyOne dollyPlusPro jibOne goldFinch slideModuleV3 panPro jibOneMk2 focusPlusPro headPlusV2 headPlusProV2 slideModuleV1 none Connect to Bundle Pairs devices and joins to them. URL /v1/link/{linkID} Method POST Caution The SDK does not supported CORS, so when you send a request with the \"OPTIONS\" method, the SDK returns an error because of HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"link2PairingConnect\" } Label Type Value Description command string link2PairingConnect command name Return value See default return values . Get Pairing Status URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"link2PairingStatus\" } Label Type Value Description command string link2PairingStatus command name Return value { \"data\": { \"canbusPairState\": \"pingReceived\", \"lastPairError\": \"none\" }, \"result\": \"ok\" } Label Type Value Description canbusPairState string idle pingReceived connecting connectionOk Master device state lastPairError string none imposiblleScenario deviceFirmwareUpdateRequired unknown cantAppendDevice Disconnect from bundle URL /v1/link/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"disconnect\" } Label Type Value Description command string disconnect command name Return value See default return values . Default Return Values { \"result\": \"ok\" } System executed your command without any issues. { \"result\": \"Invalid Arguments\" } Given arguments are invalid.","title":"Link can commands"},{"location":"endpoints/commands/link_module/link_can_commands.html#get-link-devices-results","text":"URL /v1/link/{linkID} Method POST Caution The SDK does not supported CORS, so when you send a request with \"OPTIONS\" method, the SDK return a error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"link2PairingScanResults\" } Label Type Value Description command string link2PairingScanResults command name Return value { \"data\": [ { \"firmwareVersionMajor\": 0, \"firmwareVersionMinor\": 18, \"isDeviceFirmwareUpdateAvailable\": false, \"type\": \"slideModuleV3\" }, { \"firmwareVersionMajor\": 0, \"firmwareVersionMinor\": 101, \"isDeviceFirmwareUpdateAvailable\": false, \"type\": \"headPlusV2\" } ], \"result\": \"ok\" } Label Type Value Description data device array [deviceinfo1, deviceinfo2] Array of information of devices on Link Label Type Value Description type string - Device Type firmwareVersionMajor int - Device Firmware Major Version firmwareVersionMinor int - Device fimrware Minor number isDeviceFirmwareUpdateAvailable bool - If there is exist a update available, this flag will be true Device Type slideModule headPlus headPlusPro headOne surfaceOne dollyPlus sliderOnePro sliderOne dollyOne dollyPlusPro jibOne goldFinch slideModuleV3 panPro jibOneMk2 focusPlusPro headPlusV2 headPlusProV2 slideModuleV1 none","title":"Get Link Devices results"},{"location":"endpoints/commands/link_module/link_can_commands.html#connect-to-bundle","text":"Pairs devices and joins to them. URL /v1/link/{linkID} Method POST Caution The SDK does not supported CORS, so when you send a request with the \"OPTIONS\" method, the SDK returns an error because of HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"link2PairingConnect\" } Label Type Value Description command string link2PairingConnect command name Return value See default return values .","title":"Connect to Bundle"},{"location":"endpoints/commands/link_module/link_can_commands.html#get-pairing-status","text":"URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"link2PairingStatus\" } Label Type Value Description command string link2PairingStatus command name Return value { \"data\": { \"canbusPairState\": \"pingReceived\", \"lastPairError\": \"none\" }, \"result\": \"ok\" } Label Type Value Description canbusPairState string idle pingReceived connecting connectionOk Master device state lastPairError string none imposiblleScenario deviceFirmwareUpdateRequired unknown cantAppendDevice","title":"Get Pairing Status"},{"location":"endpoints/commands/link_module/link_can_commands.html#disconnect-from-bundle","text":"URL /v1/link/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"disconnect\" } Label Type Value Description command string disconnect command name Return value See default return values .","title":"Disconnect from bundle"},{"location":"endpoints/commands/link_module/link_can_commands.html#default-return-values","text":"{ \"result\": \"ok\" } System executed your command without any issues. { \"result\": \"Invalid Arguments\" } Given arguments are invalid.","title":"Default Return Values"},{"location":"endpoints/commands/link_module/link_rj45_commands.html","text":"Connect to Bundle Pairs devices and joins to them. URL /v1/link/{linkID} Method POST Caution The SDK does not supported CORS, so when you send a request with \"OPTIONS\" method, the SDK return a error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"link1PairingConnect\" } Label Type Value Description command string link1PairingConnect command name Return value See default return values . Default Return Values { \"result\": \"ok\" } System executed your command without any issues. { \"result\": \"Invalid Arguments\" } Given arguments are invalid. { \"result\": \"Device is paired\" } Pairing is complete so no longer send any movement command","title":"Link rj45 commands"},{"location":"endpoints/commands/link_module/link_rj45_commands.html#connect-to-bundle","text":"Pairs devices and joins to them. URL /v1/link/{linkID} Method POST Caution The SDK does not supported CORS, so when you send a request with \"OPTIONS\" method, the SDK return a error because of HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"link1PairingConnect\" } Label Type Value Description command string link1PairingConnect command name Return value See default return values .","title":"Connect to Bundle"},{"location":"endpoints/commands/link_module/link_rj45_commands.html#default-return-values","text":"{ \"result\": \"ok\" } System executed your command without any issues. { \"result\": \"Invalid Arguments\" } Given arguments are invalid. { \"result\": \"Device is paired\" } Pairing is complete so no longer send any movement command","title":"Default Return Values"},{"location":"endpoints/commands/link_module/link_wifi_commands.html","text":"Initiate wireless scan URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because a HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"wirelessPairingScanStart\" } Label Type Value Description command string wirelessPairingScanStart command name Return value See default return values . Get current wireless scan results URL /v1/link/{linkID} Method POST Caution The SDK does not supported CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"wirelessPairingScanResults\" } Label Type Description command string wirelessPairingScanResults Return value { \"data\": [ { \"deviceFirmware\": 18, \"groupId\": 65535, \"isDeviceFirmwareUpdateAvailable\": false, \"isRadioFirmwareUpdateAvailable\": false, \"linkPairigingActive\": true, \"mac\": \"A4:E5:7C:CF:4F:66\", \"radioFirmware\": 32, \"rssi\": -32.0, \"setup\": \"groupMember\", \"type\": \"slideModuleV3\" }, { \"deviceFirmware\": 101, \"groupId\": 23113, \"isDeviceFirmwareUpdateAvailable\": false, \"isRadioFirmwareUpdateAvailable\": false, \"mac\": \"E8:DB:84:2C:C4:76\", \"radioFirmware\": 32, \"rssi\": -76.0, \"setup\": \"panTilt\", \"type\": \"headPlusV2\" }, { \"deviceFirmware\": 101, \"groupId\": 65535, \"isDeviceFirmwareUpdateAvailable\": false, \"isRadioFirmwareUpdateAvailable\": false, \"linkPairigingActive\": true, \"mac\": \"E8:DB:84:2C:D2:AE\", \"radioFirmware\": 33, \"rssi\": -58.0, \"setup\": \"panTiltAndSlide\", \"type\": \"headPlusV2\" }, { \"deviceFirmware\": 101, \"groupId\": 16519, \"isDeviceFirmwareUpdateAvailable\": false, \"isRadioFirmwareUpdateAvailable\": false, \"mac\": \"98:F4:AB:21:A7:7E\", \"radioFirmware\": 32, \"rssi\": -66.0, \"setup\": \"panTilt\", \"type\": \"headPlusProV2\" } ], \"result\": \"ok\" } Label Type Value Description data device array [deviceinfo1, deviceinfo2] Array of information of devices on canbus Label Type Value Description deviceFirmware int Device fimrware number groupId int Which group device is in linkPairigingActive bool IsTilted bool mac string FF:FF:FF:FF:FF:FF Mac address as string, it should be hex string rssi int Received signal strength indication isDeviceFirmwareUpdateAvailable bool If there is exist a update available, this flag will be true isRadioFirmwareUpdateAvailable bool If there is exist a update available, this flag will be true radioFirmware int Radio Firmware Version setup string If device is master device: panOnly tiltOnly panTilt slideOnly dollyOnly panAndSlide tiltAndSlide panAndDolly tiltAndDolly panTiltAndSlide panTiltAndDolly panAndJib tiltAndJib panTiltAndJib jibOnly panAndJibPlus tiltAndJibPlus panTiltAndJibPlus jibPlusOnly followFocusOnly possibleCanbusMaster If it is only bundle member: groupMember If it is not paired yet: none Other state: bootingUp firmwareError ignore - type string - Device Type Device Type slideModule headPlus headPlusPro headOne surfaceOne dollyPlus sliderOnePro sliderOne dollyOne dollyPlusPro jibOne goldFinch slideModuleV3 panPro jibOneMk2 focusPlusPro headPlusV2 headPlusProV2 slideModuleV1 none Note The scan wireless command should be sent before that command is sent. Otherwise, Link adapter does not return any device info. Create Bundle Pairs devices and joins to them. URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK return a error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"wirelessPairingCreateBundle\", \"deviceCount\": 1, \"forcedMasterDevice\": \"none\", \"macList\": [ \"E8:68:E7:2E:B5:E2\" ] } Label Type Value Description command string wirelessPairingCreateBundle command name deviceCount integer 0 - ... Number of device to be paired forcedMasterDevice string - Forced Device Type macList string FF:FF:FF:FF:FF:FF Mac list of devices. Mac pattern should be like \"xx:xx:xx:xx:xx\" Forced Master Device slideModule headPlus headPlusPro headOne surfaceOne dollyPlus sliderOnePro sliderOne dollyOne dollyPlusPro jibOne goldFinch slideModuleV3 panPro jibOneMk2 focusPlusPro headPlusV2 headPlusProV2 slideModuleV1 none Return value See default return values . Note The send mac addresses are reachable while creating the bundle. Otherwise, the pairing process will be crashed, in which case get pair state by using this command . Attach to Exist Bundle Attach to already existing paired devices. URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"wirelessPairingAttachToBundle\", \"mac\": \"30:AE:A4:8F:B1:46\" } Label Type Value Description command string wirelessPairingAttachToBundle command name mac string FF:FF:FF:FF:FF:FF Which device mac you want to connect. Mac pattern should be like \"xx:xx:xx:xx:xx\" Return value See default return values . Note The send mac addresses are reachable while creating the bundle. Otherwise, the pairing process will be crashed, in which case get pair state by using this command . Get Pairing Status URL /v1/link/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"wirelessPairingStatus\" } Label Type Value Description command string wirelessPairingStatus command name Return value { \"data\": { \"lastPairError\": \"none\", \"wirelessPairState\": \"idle\" }, \"result\": \"ok\" } Label Type Value Description lastPairError string none wifiChannelMismatch impossibleScenario radioFirmwareUpdateRequired deviceFirmwareUpdateRequired unknown deviceSearchProblem alreadyGroupMember connectionProblem Last pair error pairState string idle connecting connectionOk problem Disconnect from bundle URL /v1/link/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"disconnect\" } Label Type Value Description command string disconnect command name Return value See default return values . Default Return Values { \"result\": \"ok\" } System executed your command without any issues. { \"result\": \"Invalid Arguments\" } Given arguments are invalid.","title":"Link wifi commands"},{"location":"endpoints/commands/link_module/link_wifi_commands.html#initiate-wireless-scan","text":"URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because a HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"wirelessPairingScanStart\" } Label Type Value Description command string wirelessPairingScanStart command name Return value See default return values .","title":"Initiate wireless scan"},{"location":"endpoints/commands/link_module/link_wifi_commands.html#get-current-wireless-scan-results","text":"URL /v1/link/{linkID} Method POST Caution The SDK does not supported CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"wirelessPairingScanResults\" } Label Type Description command string wirelessPairingScanResults Return value { \"data\": [ { \"deviceFirmware\": 18, \"groupId\": 65535, \"isDeviceFirmwareUpdateAvailable\": false, \"isRadioFirmwareUpdateAvailable\": false, \"linkPairigingActive\": true, \"mac\": \"A4:E5:7C:CF:4F:66\", \"radioFirmware\": 32, \"rssi\": -32.0, \"setup\": \"groupMember\", \"type\": \"slideModuleV3\" }, { \"deviceFirmware\": 101, \"groupId\": 23113, \"isDeviceFirmwareUpdateAvailable\": false, \"isRadioFirmwareUpdateAvailable\": false, \"mac\": \"E8:DB:84:2C:C4:76\", \"radioFirmware\": 32, \"rssi\": -76.0, \"setup\": \"panTilt\", \"type\": \"headPlusV2\" }, { \"deviceFirmware\": 101, \"groupId\": 65535, \"isDeviceFirmwareUpdateAvailable\": false, \"isRadioFirmwareUpdateAvailable\": false, \"linkPairigingActive\": true, \"mac\": \"E8:DB:84:2C:D2:AE\", \"radioFirmware\": 33, \"rssi\": -58.0, \"setup\": \"panTiltAndSlide\", \"type\": \"headPlusV2\" }, { \"deviceFirmware\": 101, \"groupId\": 16519, \"isDeviceFirmwareUpdateAvailable\": false, \"isRadioFirmwareUpdateAvailable\": false, \"mac\": \"98:F4:AB:21:A7:7E\", \"radioFirmware\": 32, \"rssi\": -66.0, \"setup\": \"panTilt\", \"type\": \"headPlusProV2\" } ], \"result\": \"ok\" } Label Type Value Description data device array [deviceinfo1, deviceinfo2] Array of information of devices on canbus Label Type Value Description deviceFirmware int Device fimrware number groupId int Which group device is in linkPairigingActive bool IsTilted bool mac string FF:FF:FF:FF:FF:FF Mac address as string, it should be hex string rssi int Received signal strength indication isDeviceFirmwareUpdateAvailable bool If there is exist a update available, this flag will be true isRadioFirmwareUpdateAvailable bool If there is exist a update available, this flag will be true radioFirmware int Radio Firmware Version setup string If device is master device: panOnly tiltOnly panTilt slideOnly dollyOnly panAndSlide tiltAndSlide panAndDolly tiltAndDolly panTiltAndSlide panTiltAndDolly panAndJib tiltAndJib panTiltAndJib jibOnly panAndJibPlus tiltAndJibPlus panTiltAndJibPlus jibPlusOnly followFocusOnly possibleCanbusMaster If it is only bundle member: groupMember If it is not paired yet: none Other state: bootingUp firmwareError ignore - type string - Device Type Device Type slideModule headPlus headPlusPro headOne surfaceOne dollyPlus sliderOnePro sliderOne dollyOne dollyPlusPro jibOne goldFinch slideModuleV3 panPro jibOneMk2 focusPlusPro headPlusV2 headPlusProV2 slideModuleV1 none Note The scan wireless command should be sent before that command is sent. Otherwise, Link adapter does not return any device info.","title":"Get current wireless scan results"},{"location":"endpoints/commands/link_module/link_wifi_commands.html#create-bundle","text":"Pairs devices and joins to them. URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK return a error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"wirelessPairingCreateBundle\", \"deviceCount\": 1, \"forcedMasterDevice\": \"none\", \"macList\": [ \"E8:68:E7:2E:B5:E2\" ] } Label Type Value Description command string wirelessPairingCreateBundle command name deviceCount integer 0 - ... Number of device to be paired forcedMasterDevice string - Forced Device Type macList string FF:FF:FF:FF:FF:FF Mac list of devices. Mac pattern should be like \"xx:xx:xx:xx:xx\" Forced Master Device slideModule headPlus headPlusPro headOne surfaceOne dollyPlus sliderOnePro sliderOne dollyOne dollyPlusPro jibOne goldFinch slideModuleV3 panPro jibOneMk2 focusPlusPro headPlusV2 headPlusProV2 slideModuleV1 none Return value See default return values . Note The send mac addresses are reachable while creating the bundle. Otherwise, the pairing process will be crashed, in which case get pair state by using this command .","title":"Create Bundle"},{"location":"endpoints/commands/link_module/link_wifi_commands.html#attach-to-exist-bundle","text":"Attach to already existing paired devices. URL /v1/link/{linkID} Method POST Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is sent always as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"wirelessPairingAttachToBundle\", \"mac\": \"30:AE:A4:8F:B1:46\" } Label Type Value Description command string wirelessPairingAttachToBundle command name mac string FF:FF:FF:FF:FF:FF Which device mac you want to connect. Mac pattern should be like \"xx:xx:xx:xx:xx\" Return value See default return values . Note The send mac addresses are reachable while creating the bundle. Otherwise, the pairing process will be crashed, in which case get pair state by using this command .","title":"Attach to Exist Bundle"},{"location":"endpoints/commands/link_module/link_wifi_commands.html#get-pairing-status","text":"URL /v1/link/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"wirelessPairingStatus\" } Label Type Value Description command string wirelessPairingStatus command name Return value { \"data\": { \"lastPairError\": \"none\", \"wirelessPairState\": \"idle\" }, \"result\": \"ok\" } Label Type Value Description lastPairError string none wifiChannelMismatch impossibleScenario radioFirmwareUpdateRequired deviceFirmwareUpdateRequired unknown deviceSearchProblem alreadyGroupMember connectionProblem Last pair error pairState string idle connecting connectionOk problem","title":"Get Pairing Status"},{"location":"endpoints/commands/link_module/link_wifi_commands.html#disconnect-from-bundle","text":"URL /v1/link/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"disconnect\" } Label Type Value Description command string disconnect command name Return value See default return values .","title":"Disconnect from bundle"},{"location":"endpoints/commands/link_module/link_wifi_commands.html#default-return-values","text":"{ \"result\": \"ok\" } System executed your command without any issues. { \"result\": \"Invalid Arguments\" } Given arguments are invalid.","title":"Default Return Values"},{"location":"endpoints/commands/move/move.html","text":"Joystick Move URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"joystickMove\", \"{axis_name}\": \"{speed_ratio}\" } Label Type Value Description command string joystickMove command name axis_name float - In which axis direction you want to move and its speed ratio. Axis Name Type Value Range headPan float -180.0 - +180.0 headTilt float -180.0 - +180.0 slide float It depends your calibrations. focus float jibPlusPan float jibPlusTilt float Note As in the example below, the desired direction to move must be given as the key and the speed value as a value. Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Example JSON You want to send command for three axes; Head Pan, Head Tilt and Slide; { \"command\":\"joystickMove\", \"index\":0, \"headPan\":0.0, \"headTilt\":0.0, \"slide\":0.0, } Focus Manual Move URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"focusManualMove\", \"deltaEnc\": 10 } Label Type Value Description command string focusManualMove command name deltaEnc integer `` encoder step Motion Abort URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"motionAbort\" } Label Type Value Description command string motionAbort command name Calibration URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"calibrate\", \"device\": \"slideModuleV3\", \"isOnGround\": true, \"isOnLeftSide\" : false, \"jibLength\" = 2, \"rodLength\" = 3 } |Label| Type | Value |Description| |:--- |:---- |:-----------| | command | string | motionAbort |calibrate name| | device | string | Each device has own configuratation | Which axis you want to calibrate it.| | jibLength | float | | length of jib| | rodLength | float | | length of camera rod of jib| | isOnGround | bool | | If slider is on tripod, it should be true| | isOnLeftSide | bool | | If slide module is left side of slider, it should be true otherwise it will be false | `slideModule` `headPlus` `headPlusPro` `headOne` `surfaceOne` `dollyPlus` `sliderOnePro` `sliderOne` `dollyOne` `dollyPlusPro` `jibOne` `goldFinch` `slideModuleV3` `panPro` `jibOneMk2` `focusPlusPro` `headPlusV2` `headPlusProV2` `slideModuleV1` `none` Device Type Need Parameter slideModule isOnGround isOnLeftSide headPlus - headPlusPro - headOne - surfaceOne - dollyPlus - sliderOnePro isOnGround isOnLeftSide sliderOne isOnGround isOnLeftSide dollyOne - dollyPlusPro - jibOne jibLength rodLength goldFinch - slideModuleV3 isOnGround isOnLeftSide panPro - jibOneMk2 - focusPlusPro - headPlusV2 - headPlusProV2 - slideModuleV1 - none - Example JSON You may want to send command for three axes; Head Pan, Head Tilt and Slide; { \"command\": \"calibrate\", \"device\": \"slideModuleV3\", \"isOnGround\": true, \"isOnLeftSide\" : false } Numeric Limits Each axis has specific limit value and step value, this command returns these. URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"numericLimitValues\" } Label Type Value Description command string numericLimitValues command name Return value { \"pan_maxLimit\": 36000.0, \"pan_minLimit\": -36000.0, \"pan_step\": 0.0006099999882280827, \"result\": \"ok\", \"tilt_maxLimit\": 89.0999984741211, \"tilt_minLimit\": -89.0999984741211, \"tilt_step\": 0.0006099999882280827 } Label Type Value Description panMaxLimit float list panMinLimit float panStep float tiltMaxLimit float tiltMinLimit float tiltStep float focusMaxLimit float focusMinLimit float focusStep float jibPanMaxLimit float jibPanMinLimit float jibPanStep float jibTiltMaxLimit float jibTiltMinLimit float jibPanStep float isDataReady bool Default Return Values { \"result\": \"ok\" } System executed your command without any issues. { \"result\": \"invalid setup\" } Given device is invalid","title":"Move"},{"location":"endpoints/commands/move/move.html#joystick-move","text":"URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"joystickMove\", \"{axis_name}\": \"{speed_ratio}\" } Label Type Value Description command string joystickMove command name axis_name float - In which axis direction you want to move and its speed ratio. Axis Name Type Value Range headPan float -180.0 - +180.0 headTilt float -180.0 - +180.0 slide float It depends your calibrations. focus float jibPlusPan float jibPlusTilt float Note As in the example below, the desired direction to move must be given as the key and the speed value as a value. Caution The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Example JSON You want to send command for three axes; Head Pan, Head Tilt and Slide; { \"command\":\"joystickMove\", \"index\":0, \"headPan\":0.0, \"headTilt\":0.0, \"slide\":0.0, }","title":"Joystick Move"},{"location":"endpoints/commands/move/move.html#focus-manual-move","text":"URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"focusManualMove\", \"deltaEnc\": 10 } Label Type Value Description command string focusManualMove command name deltaEnc integer `` encoder step","title":"Focus Manual Move"},{"location":"endpoints/commands/move/move.html#motion-abort","text":"URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"motionAbort\" } Label Type Value Description command string motionAbort command name","title":"Motion Abort"},{"location":"endpoints/commands/move/move.html#calibration","text":"URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\": \"calibrate\", \"device\": \"slideModuleV3\", \"isOnGround\": true, \"isOnLeftSide\" : false, \"jibLength\" = 2, \"rodLength\" = 3 } |Label| Type | Value |Description| |:--- |:---- |:-----------| | command | string | motionAbort |calibrate name| | device | string | Each device has own configuratation | Which axis you want to calibrate it.| | jibLength | float | | length of jib| | rodLength | float | | length of camera rod of jib| | isOnGround | bool | | If slider is on tripod, it should be true| | isOnLeftSide | bool | | If slide module is left side of slider, it should be true otherwise it will be false | `slideModule` `headPlus` `headPlusPro` `headOne` `surfaceOne` `dollyPlus` `sliderOnePro` `sliderOne` `dollyOne` `dollyPlusPro` `jibOne` `goldFinch` `slideModuleV3` `panPro` `jibOneMk2` `focusPlusPro` `headPlusV2` `headPlusProV2` `slideModuleV1` `none` Device Type Need Parameter slideModule isOnGround isOnLeftSide headPlus - headPlusPro - headOne - surfaceOne - dollyPlus - sliderOnePro isOnGround isOnLeftSide sliderOne isOnGround isOnLeftSide dollyOne - dollyPlusPro - jibOne jibLength rodLength goldFinch - slideModuleV3 isOnGround isOnLeftSide panPro - jibOneMk2 - focusPlusPro - headPlusV2 - headPlusProV2 - slideModuleV1 - none - Example JSON You may want to send command for three axes; Head Pan, Head Tilt and Slide; { \"command\": \"calibrate\", \"device\": \"slideModuleV3\", \"isOnGround\": true, \"isOnLeftSide\" : false }","title":"Calibration"},{"location":"endpoints/commands/move/move.html#numeric-limits","text":"Each axis has specific limit value and step value, this command returns these. URL /v1/bundle/{linkID} Method POST Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Payload { \"command\":\"numericLimitValues\" } Label Type Value Description command string numericLimitValues command name Return value { \"pan_maxLimit\": 36000.0, \"pan_minLimit\": -36000.0, \"pan_step\": 0.0006099999882280827, \"result\": \"ok\", \"tilt_maxLimit\": 89.0999984741211, \"tilt_minLimit\": -89.0999984741211, \"tilt_step\": 0.0006099999882280827 } Label Type Value Description panMaxLimit float list panMinLimit float panStep float tiltMaxLimit float tiltMinLimit float tiltStep float focusMaxLimit float focusMinLimit float focusStep float jibPanMaxLimit float jibPanMinLimit float jibPanStep float jibTiltMaxLimit float jibTiltMinLimit float jibPanStep float isDataReady bool","title":"Numeric Limits"},{"location":"endpoints/commands/move/move.html#default-return-values","text":"{ \"result\": \"ok\" } System executed your command without any issues. { \"result\": \"invalid setup\" } Given device is invalid","title":"Default Return Values"},{"location":"endpoints/commands/status/status.html","text":"URL /bundle/{linkID}/status Method GET Caution !!! The SDK does not support CORS, so when you send a request with \"OPTIONS\" method, the SDK returns an error because an HTTP request of \"Content-Type\" is always sent as \"text/plain\" NOT \"application/json\". Return value { \"data\": { \"calibratedAxes\": [ { \"axis\": \"headPan\", \"device\": \"headPlusV2\" }, { \"axis\": \"headTilt\", \"device\": \"headPlusV2\" } ], \"deviceInfo\": [ { \"batteryLevel\": 1.0, \"deviceFirmwareVersion\": 101, \"type\": \"headPlusV2\" } ], \"deviceInfoEverythingReady\": true, \"keyposeLoopActive\": false, \"keyposeMotionAimIndex\": 0, \"keyposeMotionStartIndex\": 0, \"keyposeSlotsFilled\": [ false, false, false, false, false, false ], \"plannedMotionProgress\": 1.0, \"plannedMotionSecs\": 0.0, \"readings\": { \"headPan\": 89.95600128173828, \"headTilt\": 0.0 }, \"realTimeSupportedAxes\": [], \"state\": \"idle\", \"supportedAxes\": [ { \"axis\": \"headPan\", \"device\": \"headPlusV2\" }, { \"axis\": \"headTilt\", \"device\": \"headPlusV2\" } ], \"timestampDevice\": 303462, \"timestampEpoch\": 1634645133077 }, \"result\": \"ok\" } Label Type Value Description calibratedAxes string array Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt Calibrated axes as string array deviceInfo device info array Each elements describes in below table Array of information of devices deviceInfoEverythingReady bool true - false It means that when it is true, that can get information. Otherwise, you can not get information. keyposeLoopActive bool true - false It means that if it is true, your bundle is looping between the specified keypose indexes. keyposeMotionAimIndex int 0 - 5 aim index for keypose motion. keyposeMotionStartIndex int 0 - 5 Index that before start keypose motion. keyposeSlotsFilled bool array true - false Array has six elements, each element represents that whether index is filled. plannedMotionProgress float 0.0 - 1.0 It shows the percentage of how many complete of keypose motion. It is mapped between 0.0 - 1.0. plannedMotionSecs float How many seconds the keypose motion will take readings key-value pair array Each elements describes in below table Array of information of each axis realTimeSupportedAxes string array Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt Which axes the bundle has are supported in Real-Time Move. state string Idle Keypose_Move RealTime_Move Focus_Calibration Slider_Calibration Joystick_Move Unsupported_Activity Shows state of the bundle movement. timestampDevice long int The status was generated at this timestamp on the master device. timestampEpoch long int The status was grabbed from the SDK at this timestamp. Label Type Value Description deviceFirmwareVersion int Device fimrware version batteryLevel int 0 - 100 Battery level type string - Device Type Device Type slideModule headPlus headPlusPro headOne surfaceOne dollyPlus sliderOnePro sliderOne dollyOne dollyPlusPro jibOne goldFinch slideModuleV3 panPro jibOneMk2 focusPlusPro headPlusV2 headPlusProV2 slideModuleV1 none Label Type Value Description readings It may consist of one or more of the following: Head_Pan Head_Tilt Slide Focus Jib_Pan Jib_Tilt float Head_Pan: -180 - 180 Head_Tilt: -180 - 180 Slide: Focus: Jib_Pan: Jib_Tilt: In which axis direction you want to move and its speed ratio. Note You need to ask for this manually at regular intervals. Each request will return a status data without waiting for the contents to be updated. If you want to differentiate whether status is changed or not, you can use the TimestampEpoch field value.","title":"Status"},{"location":"link_modules/link_adapter.html","text":"Link Adapter provides communication with three types of connection. These are; Wireless RJ45 Canbus Each connection type has a specific connection, pairing, and method of motion. You can manage your device(s) by following the image below. Each Link Adapter has a unique link id, with a length of 12 characters. for example; 205F344B5530 All commands need this Link ID. Wireless The wireless connection does not need another physical connection except a connection between Link Adapter and the PC. Supported Connection Type Supported Device Supported Move Type Supported Real-Time Axis Description Wireless All Devices Joystick Move Keypose Move - - RJ45 Head Plus Real-Time Move Joystick Move Keypose Move - - Canbus HeadPlus Pro v2 Real-Time Move Joystick Move Keypose Move - - Pairing Pairing is completed via Link Adapter using API commands. Calibration and Limits Motion Control Link Adapter supports three two types of movement; Joystick Move Keypose Move Limitations Wireless connection does not support Real-Time movement. If there is much wifi or electromagnetic signal in the working environment, that noise can affect the connection. Details RJ45 The connection is established with a patch cable. The patch cable is plugged into whichever device you want to operate with the Link Adapter. Pairing RJ45 connection type does not have a pairing capability. So if you want to control other devices over the master device, you should use the mobile application apps. Motion Control RJ45 connection type supports three types of movement; Real-Time Move Joystick Move Keypose Move Limitations There is only one device that can connect via cable. If there are devices paired via wireless except connected with cable, the Real-Time Move only works with the cable-connected device. More Details About Limitations Link Connection The Link connection means that each device is connected via link cable. Supported Connection Type Supported Device Supported Move Type Supported Real-Time Axis Description Wireless All Devices Joystick Move Keypose Move - - RJ45 Head Plus Real-Time Move Joystick Move Keypose Move - - Canbus HeadPlus Pro v2 Real-Time Move Joystick Move Keypose Move - - Pairing Pairing is completed via Link Adapter using API commands. Calibration and Limits Motion Control Link connection type supports three types of movement; Real-Time Move Joystick Move Keypose Move Limitations Link connection needs to the cable connection between devices. So How To Control Your Device With Link Adapter The edelkrone SDK will notify you of each module plugged into the PC. This notification appears in the notification area of your OS. That notification contains the Link ID of your link module. This ID is also required to distinguish if you have multiple modules when sending commands. You will then get a notification that the SDK has recognized your module and open a communication channel. How to get the Link ID of Link Adapter and its status To control your device, you first need to get the Link ID of the Link Adapter. You can get the Link ID of the Link Adapter. Get Link Module List and Status Command You can also use this command to get the status of the other link modules. How to manage multiple devices Paired device(s) after completing pairing are called a bundle . First of all, to manage your devices, you need to create a bundle by pairing your devices and Link Adapter. Or attach your link adapter to an already existing bundle. The link Adapter has three communication channels. Each channel has its unique pairing methods. It is explained below how to pair your device according to your chosen channel. Pairing 1. Pairing with Wireless Channel Link Adapter can create a bundle from zero or can attach itself to your already created bundle. To pair your devices with the Link Adapter, you need to know your devices' mac address. To get the mac addresses, you should scan command to the Link Adapter. You can also find from here more details about that api command. Warning!!! Please be sure that your devices are energized. After then the Link Adapter will be gathered the mac addresses from its around. To get mac addresses from edelkrone SDK, you can use this scan result command . Now, you have mac addresses of your devices that you want to control. You can create a bundle or attach to already exist a bundle by using the below commands respectively. \"create bundle\" command creates a bundle by including itself. \"attach to exist bundle\" command to attach to an already existing bundle. You can follow the pairing status by using the pairing status command when sending a pairing command. You can send move commands when the pairing status is \"ok\". \"Get Pairing Status\" 2. Pairing with RJ45 The pairing with RJ45 is automatically paired with the connected device via a patch cable. Paired device(s) after completing pairing are called a bundle . But, you may want to control multiple devices; you need to pair it with the device connected with the Link Adapter. But RJ45 does not have any pairing ability, and the edelkrone SDK does not have any pair command for RJ45; you can use the edelkrone mobile application to pair them. 2. Pairing CanBus How to get the status of the edelkrone device in the bundle The bundle status is automatically updated from edelkrone devices when the pairing process is completed. The status contains paired devices information, supported axis, supported real-time axis, bundle state, axis values of the devices. You can get the status by using the command status end point . Send move command to your bundle There are four types of movement. Except for real-time moves, other movement types can be controlled over HTTP API. But, HTTP has several overheads; therefore, you need to prefer Websocket Protocol to control in real-time. Also check for limitations . 1. Joystick This command takes the speed ratio in the axis to be moved and makes it move at that speed in that direction. This movement supports a five-axis that depends on your bundle. For example; Your bundle has three axes, for example, pan, tilt, and slide. And you want to send a move command in these three axes. Just add the axes you want and their speed ratio. You can also find more details about that api command here 2. Keypose You can save up to six poses. You can make a loop between these poses, or you can send your bundle from a point you want to a pose you want. 1. Keypose Store Current Pose When you send this command, a pose will be stored for you with an index number of your bundle at the moment. You can also find from here more details about that api command. 2. Keypose Store By Numeric Data Numeric data means that your axis values, which are you want to save as pose. You can also find from here more details about that api command. 3. Keypose Move with Fixed Duration You can make your bundle go from any point to a pose you want with this command. But this movement takes place with the fixed duration you give. But movement speed varies according to the given time. You can also find from here more details about that api command. 4. Keypose Move with Fixed Speed You can make your bundle go from any point to a pose you want with this command. But this movement takes place with the fixed speed ratio you give. But movement duration varies according to the given speed ratio. You can also find here more details about that api command. 5. Loop Between Keyposes with Fixed Duration This command can create loops between the poses you recorded. This movement takes place with the fixed duration you give. But movement speed varies according to the given time. You can also find more details about that api command here . 5. Loop Between Keyposes with Fixed Speed With this command, you can create loops between the poses you recorded. This movement takes place with the fixed speed you give. But the duration of the movement varies according to the given speed ratio. You can also find from more details about that api command here . 6. Read Keypose Numeric Information With this command, you can read the axis values of the pose you stored. It takes an index as an argument and returns the information that you want. You can also find more details about that api command here . 7. Delete Keypose When you store a keypose, it occupies a slot in a keypose list. If you need to add a new keypose, you need to delete keypose. You can also find from more details about that api command here . 3. Focus Move You can use it for focus movement when you plug a focus module into your head. You can also find more details about that api command here . 4. Real-Time Move The supports Real-Time . Real-Time movement needs a reliable communication channel. So wireless connection does not support the real-time movement. The HTTP protocol has some overheads. You can also find more details about that api command here .","title":"Link adapter"},{"location":"link_modules/link_adapter.html#wireless","text":"The wireless connection does not need another physical connection except a connection between Link Adapter and the PC. Supported Connection Type Supported Device Supported Move Type Supported Real-Time Axis Description Wireless All Devices Joystick Move Keypose Move - - RJ45 Head Plus Real-Time Move Joystick Move Keypose Move - - Canbus HeadPlus Pro v2 Real-Time Move Joystick Move Keypose Move - -","title":"Wireless"},{"location":"link_modules/link_adapter.html#pairing","text":"Pairing is completed via Link Adapter using API commands.","title":"Pairing"},{"location":"link_modules/link_adapter.html#calibration-and-limits","text":"","title":"Calibration and Limits"},{"location":"link_modules/link_adapter.html#motion-control","text":"Link Adapter supports three two types of movement; Joystick Move Keypose Move","title":"Motion Control"},{"location":"link_modules/link_adapter.html#limitations","text":"Wireless connection does not support Real-Time movement. If there is much wifi or electromagnetic signal in the working environment, that noise can affect the connection. Details","title":"Limitations"},{"location":"link_modules/link_adapter.html#rj45","text":"The connection is established with a patch cable. The patch cable is plugged into whichever device you want to operate with the Link Adapter.","title":"RJ45"},{"location":"link_modules/link_adapter.html#pairing_1","text":"RJ45 connection type does not have a pairing capability. So if you want to control other devices over the master device, you should use the mobile application apps.","title":"Pairing"},{"location":"link_modules/link_adapter.html#motion-control_1","text":"RJ45 connection type supports three types of movement; Real-Time Move Joystick Move Keypose Move","title":"Motion Control"},{"location":"link_modules/link_adapter.html#limitations_1","text":"There is only one device that can connect via cable. If there are devices paired via wireless except connected with cable, the Real-Time Move only works with the cable-connected device. More Details About Limitations","title":"Limitations"},{"location":"link_modules/link_adapter.html#link-connection","text":"The Link connection means that each device is connected via link cable. Supported Connection Type Supported Device Supported Move Type Supported Real-Time Axis Description Wireless All Devices Joystick Move Keypose Move - - RJ45 Head Plus Real-Time Move Joystick Move Keypose Move - - Canbus HeadPlus Pro v2 Real-Time Move Joystick Move Keypose Move - -","title":"Link Connection"},{"location":"link_modules/link_adapter.html#pairing_2","text":"Pairing is completed via Link Adapter using API commands.","title":"Pairing"},{"location":"link_modules/link_adapter.html#calibration-and-limits_1","text":"","title":"Calibration and Limits"},{"location":"link_modules/link_adapter.html#motion-control_2","text":"Link connection type supports three types of movement; Real-Time Move Joystick Move Keypose Move","title":"Motion Control"},{"location":"link_modules/link_adapter.html#limitations_2","text":"Link connection needs to the cable connection between devices. So","title":"Limitations"},{"location":"link_modules/link_adapter.html#how-to-control-your-device-with-link-adapter","text":"The edelkrone SDK will notify you of each module plugged into the PC. This notification appears in the notification area of your OS. That notification contains the Link ID of your link module. This ID is also required to distinguish if you have multiple modules when sending commands. You will then get a notification that the SDK has recognized your module and open a communication channel.","title":"How To Control Your Device With Link Adapter"},{"location":"link_modules/link_adapter.html#how-to-get-the-link-id-of-link-adapter-and-its-status","text":"To control your device, you first need to get the Link ID of the Link Adapter. You can get the Link ID of the Link Adapter. Get Link Module List and Status Command You can also use this command to get the status of the other link modules.","title":"How to get the Link ID of Link Adapter and its status"},{"location":"link_modules/link_adapter.html#how-to-manage-multiple-devices","text":"Paired device(s) after completing pairing are called a bundle . First of all, to manage your devices, you need to create a bundle by pairing your devices and Link Adapter. Or attach your link adapter to an already existing bundle. The link Adapter has three communication channels. Each channel has its unique pairing methods. It is explained below how to pair your device according to your chosen channel.","title":"How to manage multiple devices"},{"location":"link_modules/link_adapter.html#pairing_3","text":"","title":"Pairing"},{"location":"link_modules/link_adapter.html#1-pairing-with-wireless-channel","text":"Link Adapter can create a bundle from zero or can attach itself to your already created bundle. To pair your devices with the Link Adapter, you need to know your devices' mac address. To get the mac addresses, you should scan command to the Link Adapter. You can also find from here more details about that api command. Warning!!! Please be sure that your devices are energized. After then the Link Adapter will be gathered the mac addresses from its around. To get mac addresses from edelkrone SDK, you can use this scan result command . Now, you have mac addresses of your devices that you want to control. You can create a bundle or attach to already exist a bundle by using the below commands respectively. \"create bundle\" command creates a bundle by including itself. \"attach to exist bundle\" command to attach to an already existing bundle. You can follow the pairing status by using the pairing status command when sending a pairing command. You can send move commands when the pairing status is \"ok\". \"Get Pairing Status\"","title":"1. Pairing with Wireless Channel"},{"location":"link_modules/link_adapter.html#2-pairing-with-rj45","text":"The pairing with RJ45 is automatically paired with the connected device via a patch cable. Paired device(s) after completing pairing are called a bundle . But, you may want to control multiple devices; you need to pair it with the device connected with the Link Adapter. But RJ45 does not have any pairing ability, and the edelkrone SDK does not have any pair command for RJ45; you can use the edelkrone mobile application to pair them.","title":"2. Pairing with RJ45"},{"location":"link_modules/link_adapter.html#2-pairing-canbus","text":"","title":"2. Pairing CanBus"},{"location":"link_modules/link_adapter.html#how-to-get-the-status-of-the-edelkrone-device-in-the-bundle","text":"The bundle status is automatically updated from edelkrone devices when the pairing process is completed. The status contains paired devices information, supported axis, supported real-time axis, bundle state, axis values of the devices. You can get the status by using the command status end point .","title":"How to get the status of the edelkrone device in the bundle"},{"location":"link_modules/link_adapter.html#send-move-command-to-your-bundle","text":"There are four types of movement. Except for real-time moves, other movement types can be controlled over HTTP API. But, HTTP has several overheads; therefore, you need to prefer Websocket Protocol to control in real-time. Also check for limitations .","title":"Send move command to your bundle"},{"location":"link_modules/link_adapter.html#1-joystick","text":"This command takes the speed ratio in the axis to be moved and makes it move at that speed in that direction. This movement supports a five-axis that depends on your bundle. For example; Your bundle has three axes, for example, pan, tilt, and slide. And you want to send a move command in these three axes. Just add the axes you want and their speed ratio. You can also find more details about that api command here","title":"1. Joystick"},{"location":"link_modules/link_adapter.html#2-keypose","text":"You can save up to six poses. You can make a loop between these poses, or you can send your bundle from a point you want to a pose you want.","title":"2. Keypose"},{"location":"link_modules/link_adapter.html#1-keypose-store-current-pose","text":"When you send this command, a pose will be stored for you with an index number of your bundle at the moment. You can also find from here more details about that api command.","title":"1. Keypose Store Current Pose"},{"location":"link_modules/link_adapter.html#2-keypose-store-by-numeric-data","text":"Numeric data means that your axis values, which are you want to save as pose. You can also find from here more details about that api command.","title":"2. Keypose Store By Numeric Data"},{"location":"link_modules/link_adapter.html#3-keypose-move-with-fixed-duration","text":"You can make your bundle go from any point to a pose you want with this command. But this movement takes place with the fixed duration you give. But movement speed varies according to the given time. You can also find from here more details about that api command.","title":"3. Keypose Move with Fixed Duration"},{"location":"link_modules/link_adapter.html#4-keypose-move-with-fixed-speed","text":"You can make your bundle go from any point to a pose you want with this command. But this movement takes place with the fixed speed ratio you give. But movement duration varies according to the given speed ratio. You can also find here more details about that api command.","title":"4. Keypose Move with Fixed Speed"},{"location":"link_modules/link_adapter.html#5-loop-between-keyposes-with-fixed-duration","text":"This command can create loops between the poses you recorded. This movement takes place with the fixed duration you give. But movement speed varies according to the given time. You can also find more details about that api command here .","title":"5.  Loop Between Keyposes with Fixed Duration"},{"location":"link_modules/link_adapter.html#5-loop-between-keyposes-with-fixed-speed","text":"With this command, you can create loops between the poses you recorded. This movement takes place with the fixed speed you give. But the duration of the movement varies according to the given speed ratio. You can also find from more details about that api command here .","title":"5.  Loop Between Keyposes with Fixed Speed"},{"location":"link_modules/link_adapter.html#6-read-keypose-numeric-information","text":"With this command, you can read the axis values of the pose you stored. It takes an index as an argument and returns the information that you want. You can also find more details about that api command here .","title":"6. Read Keypose Numeric Information"},{"location":"link_modules/link_adapter.html#7-delete-keypose","text":"When you store a keypose, it occupies a slot in a keypose list. If you need to add a new keypose, you need to delete keypose. You can also find from more details about that api command here .","title":"7. Delete Keypose"},{"location":"link_modules/link_adapter.html#3-focus-move","text":"You can use it for focus movement when you plug a focus module into your head. You can also find more details about that api command here .","title":"3. Focus Move"},{"location":"link_modules/link_adapter.html#4-real-time-move","text":"The supports Real-Time . Real-Time movement needs a reliable communication channel. So wireless connection does not support the real-time movement. The HTTP protocol has some overheads. You can also find more details about that api command here .","title":"4. Real-Time Move"},{"location":"link_modules/stop_mot_mod.html","text":"Stop Motion Module provides communication with a cable connection. So there one device is connected with the cable at the same time. You can manage your device(s) according to the image below. Supported Connection Type Supported Device Supported Move Type Supported Real-Time Axis Description RJ45 All Devices Real-Time Move Joystick Move Keypose Move - - Each Stop Motion Module has a unique link id, which is 24 characters long. for example; 0013002F5053431920383031 You can control your device using this link ID. Motion Control Stop Motion Module supports three types of movement; Real-Time Move Joystick Move Keypose Move Limitations There is only one device that can connect via cable. If there are devices paired via wireless except connected with cable, the Real-Time Move is only working with the cable-connected device. More Details About Limitations How To Control Your Device With Stop Motion Module The edelkrone SDK will notify you of each module plugged into the PC. This notification appears in the notification area of your OS. This notification contains the Link ID of your link module. This ID is also required to distinguish if you have multiple modules when sending commands. You will then again receive a notification that the SDK has recognized your module and open communication channel. How to get the Link ID of Stop Motion Module and its status To control your device, you first need to get the Link ID of the Stop Motion Module. You can get the Link ID of the Stop Motion Module. Get Link Module List and Status Command Also, this command you can use to get the status of other link modules. Caution Almost all commands need that ID. Also, the Link ID must be saved for later usage. How to manage multiple devices Stop Motion Module is automatically paired with the connected device via a patch cable. Paired device(s) after completing pairing are called a bundle . But, you may want to control multiple devices; you need to pair them with the device connected with the Stop Motion Module. But Stop Motion Module does not have any pairing ability, and the edelkrone SDK does not have any pair command for the Stop Motion Module; you can use the edelkrone mobile application to pair them. How to get the status of edelkrone devices in bundle The bundle status is automatically updated from edelkrone devices when the pairing process is completed. The status contains paired devices information, supported axis, supported real-time axis, bundle status, axis values of the devices. You can get status by using this command status end point . Send move command to your bundle There are four types of movement. Except for real-time moves, other movement types can be controlled over HTTP API. But, HTTP has several overheads; therefore, you need to prefer Websocket Protocol to manage in real-time. 1. Joystick This command takes the speed ratio in the axis to be moved from you and makes it move at that speed in that direction. This movement supports a five-axis that depends on your bundle. For example; Your bundle has three axes, for example, pan, tilt, and slide. And you want to send a move command in these three axes. Just add the axes you want and their speed ratio. You can also find more details about that api command here . 2. Keypose You can save up to six poses. You can make a loop between these poses, or you can send your bundle from a point you want to a pose you want. 1. Keypose Store Current Pose When you send this command, a pose with an index number of your bundle at the time will be stored for you. You can also find more details about that api command here . 2. Keypose Store By Numeric Data Numeric data means your axis values, which are you want to save as pose. You can also find more details about that api command here . 3. Keypose Move with Fixed Duration You can make your bundle go from any point to a pose you want with this command. But this movement takes place with the fixed duration you give. But movement speed varies according to the given time. You can also find from more details about that api command here . 4. Keypose Move with Fixed Speed You can make your bundle go from any point to a pose you want with this command. But this movement takes place with the fixed speed ratio you give. But the duration of the movement varies according to the given speed ratio. You can also find more details about that api command here . 5. Loop Between Keyposes with Fixed Duration With this command, you can create loops between the poses you recorded. This movement takes place with the fixed duration you give. But movement speed varies according to the given time. You can also find more details about that api command here . 5. Loop Between Keyposes with Fixed Speed With this command, you can create loops between the poses you recorded. This movement takes place with the fixed speed you give. But movement duration varies according to the given speed ratio. You can also find more details about that api command here . 6. Read Keypose Numeric Information With this command, you can read the axis values of the pose you stored. It takes an index as an argument and returns information that you want to get. You can also find more details about that api command here . 7. Delete Keypose When you store a keypose, it occupies a slot in a keypose list. If you need to add a new keypose, you need to delete keypose. You can also find from more details about that api command here . 3. Focus Move You can use it for focus movement when you plugged a focus module into your head. You can also find from more details about that api command here . 4. Real-Time Move The Stop Motion Module supports Real-Time . Real-Time movement needs a reliable communication channel. So wireless connection does not support real-time movement. You can also find more details about that api command here .","title":"Stop mot mod"},{"location":"link_modules/stop_mot_mod.html#motion-control","text":"Stop Motion Module supports three types of movement; Real-Time Move Joystick Move Keypose Move","title":"Motion Control"},{"location":"link_modules/stop_mot_mod.html#limitations","text":"There is only one device that can connect via cable. If there are devices paired via wireless except connected with cable, the Real-Time Move is only working with the cable-connected device. More Details About Limitations","title":"Limitations"},{"location":"link_modules/stop_mot_mod.html#how-to-control-your-device-with-stop-motion-module","text":"The edelkrone SDK will notify you of each module plugged into the PC. This notification appears in the notification area of your OS. This notification contains the Link ID of your link module. This ID is also required to distinguish if you have multiple modules when sending commands. You will then again receive a notification that the SDK has recognized your module and open communication channel.","title":"How To Control Your Device With Stop Motion Module"},{"location":"link_modules/stop_mot_mod.html#how-to-get-the-link-id-of-stop-motion-module-and-its-status","text":"To control your device, you first need to get the Link ID of the Stop Motion Module. You can get the Link ID of the Stop Motion Module. Get Link Module List and Status Command Also, this command you can use to get the status of other link modules. Caution Almost all commands need that ID. Also, the Link ID must be saved for later usage.","title":"How to get the Link ID of Stop Motion Module and its status"},{"location":"link_modules/stop_mot_mod.html#how-to-manage-multiple-devices","text":"Stop Motion Module is automatically paired with the connected device via a patch cable. Paired device(s) after completing pairing are called a bundle . But, you may want to control multiple devices; you need to pair them with the device connected with the Stop Motion Module. But Stop Motion Module does not have any pairing ability, and the edelkrone SDK does not have any pair command for the Stop Motion Module; you can use the edelkrone mobile application to pair them.","title":"How to manage multiple devices"},{"location":"link_modules/stop_mot_mod.html#how-to-get-the-status-of-edelkrone-devices-in-bundle","text":"The bundle status is automatically updated from edelkrone devices when the pairing process is completed. The status contains paired devices information, supported axis, supported real-time axis, bundle status, axis values of the devices. You can get status by using this command status end point .","title":"How to get the status of edelkrone devices in bundle"},{"location":"link_modules/stop_mot_mod.html#send-move-command-to-your-bundle","text":"There are four types of movement. Except for real-time moves, other movement types can be controlled over HTTP API. But, HTTP has several overheads; therefore, you need to prefer Websocket Protocol to manage in real-time.","title":"Send move command to your bundle"},{"location":"link_modules/stop_mot_mod.html#1-joystick","text":"This command takes the speed ratio in the axis to be moved from you and makes it move at that speed in that direction. This movement supports a five-axis that depends on your bundle. For example; Your bundle has three axes, for example, pan, tilt, and slide. And you want to send a move command in these three axes. Just add the axes you want and their speed ratio. You can also find more details about that api command here .","title":"1. Joystick"},{"location":"link_modules/stop_mot_mod.html#2-keypose","text":"You can save up to six poses. You can make a loop between these poses, or you can send your bundle from a point you want to a pose you want.","title":"2. Keypose"},{"location":"link_modules/stop_mot_mod.html#1-keypose-store-current-pose","text":"When you send this command, a pose with an index number of your bundle at the time will be stored for you. You can also find more details about that api command here .","title":"1. Keypose Store Current Pose"},{"location":"link_modules/stop_mot_mod.html#2-keypose-store-by-numeric-data","text":"Numeric data means your axis values, which are you want to save as pose. You can also find more details about that api command here .","title":"2. Keypose Store By Numeric Data"},{"location":"link_modules/stop_mot_mod.html#3-keypose-move-with-fixed-duration","text":"You can make your bundle go from any point to a pose you want with this command. But this movement takes place with the fixed duration you give. But movement speed varies according to the given time. You can also find from more details about that api command here .","title":"3. Keypose Move with Fixed Duration"},{"location":"link_modules/stop_mot_mod.html#4-keypose-move-with-fixed-speed","text":"You can make your bundle go from any point to a pose you want with this command. But this movement takes place with the fixed speed ratio you give. But the duration of the movement varies according to the given speed ratio. You can also find more details about that api command here .","title":"4. Keypose Move with Fixed Speed"},{"location":"link_modules/stop_mot_mod.html#5-loop-between-keyposes-with-fixed-duration","text":"With this command, you can create loops between the poses you recorded. This movement takes place with the fixed duration you give. But movement speed varies according to the given time. You can also find more details about that api command here .","title":"5.  Loop Between Keyposes with Fixed Duration"},{"location":"link_modules/stop_mot_mod.html#5-loop-between-keyposes-with-fixed-speed","text":"With this command, you can create loops between the poses you recorded. This movement takes place with the fixed speed you give. But movement duration varies according to the given speed ratio. You can also find more details about that api command here .","title":"5.  Loop Between Keyposes with Fixed Speed"},{"location":"link_modules/stop_mot_mod.html#6-read-keypose-numeric-information","text":"With this command, you can read the axis values of the pose you stored. It takes an index as an argument and returns information that you want to get. You can also find more details about that api command here .","title":"6. Read Keypose Numeric Information"},{"location":"link_modules/stop_mot_mod.html#7-delete-keypose","text":"When you store a keypose, it occupies a slot in a keypose list. If you need to add a new keypose, you need to delete keypose. You can also find from more details about that api command here .","title":"7. Delete Keypose"},{"location":"link_modules/stop_mot_mod.html#3-focus-move","text":"You can use it for focus movement when you plugged a focus module into your head. You can also find from more details about that api command here .","title":"3. Focus Move"},{"location":"link_modules/stop_mot_mod.html#4-real-time-move","text":"The Stop Motion Module supports Real-Time . Real-Time movement needs a reliable communication channel. So wireless connection does not support real-time movement. You can also find more details about that api command here .","title":"4. Real-Time Move"}]}